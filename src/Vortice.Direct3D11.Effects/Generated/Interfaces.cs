// <auto-generated/>

namespace SharpDX.Direct3D11
{
    [System.Runtime.InteropServices.GuidAttribute("fa61ca24-e4ba-4262-9db8-b132e8cae319")]
    public partial class Effect : SharpDX.ComObject
    {
        public Effect(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Effect(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Effect(nativePtr);
        /// <summary>
        /// <p>Test an effect to see if it contains valid syntax.</p>
        /// </summary>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476844</doc-id>
        /// <unmanaged>IsValid</unmanaged>
        /// <unmanaged-short>IsValid</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsValid
        {
            get => IsValid_();
        }

        /// <summary>
        /// <p>Get the device that created the effect.</p>
        /// </summary>
        /// <remarks>
        /// <p>An effect is created for a specific device, by calling a function such as <strong>D3DX11CreateEffectFromMemory</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476835</doc-id>
        /// <unmanaged>GetDevice</unmanaged>
        /// <unmanaged-short>GetDevice</unmanaged-short>
        public SharpDX.Direct3D11.Device Device
        {
            get
            {
                GetDevice(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Get an effect description.</p>
        /// </summary>
        /// <remarks>
        /// <p>An effect description contains basic information about an effect such as the techniques it contains and the constant buffer resources it requires.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476834</doc-id>
        /// <unmanaged>GetDesc</unmanaged>
        /// <unmanaged-short>GetDesc</unmanaged-short>
        public SharpDX.Direct3D11.EffectDescription Description
        {
            get
            {
                GetDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets a class linkage interface.</p>
        /// </summary>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476831</doc-id>
        /// <unmanaged>GetClassLinkage</unmanaged>
        /// <unmanaged-short>GetClassLinkage</unmanaged-short>
        public SharpDX.Direct3D11.ClassLinkage ClassLinkage
        {
            get => GetClassLinkage();
        }

        /// <summary>
        /// <p>Test an effect to see if the reflection metadata has been removed from memory.</p>
        /// </summary>
        /// <remarks>
        /// <p>An effect uses memory space two different ways: to store the information required by the runtime to execute an effect,  and to store the metadata required to reflect information back to an application using the API. You can minimize the amount of memory required by  an effect by calling <strong>ID3DX11Effect::Optimize</strong> which removes the reflection metadata from memory. Of course, API methods to read variables  will no longer work once reflection data has been removed.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476843</doc-id>
        /// <unmanaged>IsOptimized</unmanaged>
        /// <unmanaged-short>IsOptimized</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsOptimized
        {
            get => IsOptimized_();
        }

        /// <summary>
        /// <p>Test an effect to see if it contains valid syntax.</p>
        /// </summary>
        /// <returns><p><strong>TRUE</strong> if the code syntax is valid; otherwise <strong><see cref = "SharpDX.Result.False"/></strong>.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476844</doc-id>
        /// <unmanaged>BOOL ID3DX11Effect::IsValid()</unmanaged>
        /// <unmanaged-short>ID3DX11Effect::IsValid</unmanaged-short>
        internal unsafe SharpDX.Mathematics.Interop.RawBool IsValid_()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// <p>Get the device that created the effect.</p>
        /// </summary>
        /// <param name = "deviceOut"><dd>  <p>A reference to an <strong><see cref = "SharpDX.Direct3D11.Device"/></strong>.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>An effect is created for a specific device, by calling a function such as <strong>D3DX11CreateEffectFromMemory</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476835</doc-id>
        /// <unmanaged>HRESULT ID3DX11Effect::GetDevice([Out] ID3D11Device** ppDevice)</unmanaged>
        /// <unmanaged-short>ID3DX11Effect::GetDevice</unmanaged-short>
        internal unsafe void GetDevice(out SharpDX.Direct3D11.Device deviceOut)
        {
            System.IntPtr deviceOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, &deviceOut_, (*(void ***)this._nativePointer)[4]);
            if (deviceOut_ != System.IntPtr.Zero)
                deviceOut = new SharpDX.Direct3D11.Device(deviceOut_);
            else
                deviceOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get an effect description.</p>
        /// </summary>
        /// <param name = "descRef"><dd>  <p>A reference to an effect description (see <strong><see cref = "SharpDX.Direct3D11.EffectDescription"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>An effect description contains basic information about an effect such as the techniques it contains and the constant buffer resources it requires.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476834</doc-id>
        /// <unmanaged>HRESULT ID3DX11Effect::GetDesc([Out] D3DX11_EFFECT_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3DX11Effect::GetDesc</unmanaged-short>
        internal unsafe void GetDescription(out SharpDX.Direct3D11.EffectDescription descRef)
        {
            descRef = default (SharpDX.Direct3D11.EffectDescription);
            SharpDX.Result __result__;
            fixed (void *descRef_ = &descRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, descRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a constant buffer by index.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
        /// <returns><p>A reference to a <strong><see cref = "SharpDX.Direct3D11.EffectConstantBuffer"/></strong>.</p></returns>
        /// <remarks>
        /// <p>An effect that contains a variable that will be read/written by an application requires at least one constant buffer.  For best performance, an effect should organize variables into one or more constant buffers based on their frequency of update.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476832</doc-id>
        /// <unmanaged>ID3DX11EffectConstantBuffer* ID3DX11Effect::GetConstantBufferByIndex([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3DX11Effect::GetConstantBufferByIndex</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectConstantBuffer GetConstantBufferByIndex(System.Int32 index)
        {
            SharpDX.Direct3D11.EffectConstantBuffer __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, index, (*(void ***)this._nativePointer)[6]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectConstantBuffer(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a constant buffer by name.</p>
        /// </summary>
        /// <param name = "name"><dd>  <p>The constant-buffer name.</p> </dd></param>
        /// <returns><p>A reference to the constant buffer indicated by the Name. See <strong><see cref = "SharpDX.Direct3D11.EffectConstantBuffer"/></strong>.</p></returns>
        /// <remarks>
        /// <p>An effect that contains a variable that will be read/written by an application requires at least one constant buffer. For best performance,  an effect should organize variables into one or more constant buffers based on their frequency of update.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476833</doc-id>
        /// <unmanaged>ID3DX11EffectConstantBuffer* ID3DX11Effect::GetConstantBufferByName([In] const char* Name)</unmanaged>
        /// <unmanaged-short>ID3DX11Effect::GetConstantBufferByName</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectConstantBuffer GetConstantBufferByName(System.String name)
        {
            System.IntPtr name_;
            SharpDX.Direct3D11.EffectConstantBuffer __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            name_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(name);
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (void *)name_, (*(void ***)this._nativePointer)[7]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectConstantBuffer(__result__native);
            else
                __result__ = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(name_);
            return __result__;
        }

        /// <summary>
        /// <p>Get a variable by index.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
        /// <returns><p>A reference to a <strong><see cref = "SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <p>An effect may contain one or more variables. Variables outside of a technique are considered global to all effects, those located inside of a technique  are local to that technique. You can access any local non-static effect variable using its name or with an index.</p><p>The method returns a reference to an <strong>effect-variable interface</strong> if a variable is not found; you can  call <strong>ID3DX11Effect::IsValid</strong> to verify whether or not the index exists.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476840</doc-id>
        /// <unmanaged>ID3DX11EffectVariable* ID3DX11Effect::GetVariableByIndex([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3DX11Effect::GetVariableByIndex</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectVariable GetVariableByIndex(System.Int32 index)
        {
            SharpDX.Direct3D11.EffectVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, index, (*(void ***)this._nativePointer)[8]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a variable by name.</p>
        /// </summary>
        /// <param name = "name"><dd>  <p>The variable name.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectVariable"/></strong>.  Returns an invalid variable if the specified name cannot be found.</p></returns>
        /// <remarks>
        /// <p>An effect may contain one or more variables. Variables outside of a technique are considered global to all effects, those located inside of a  technique are local to that technique. You can access an effect variable using its name or with an index.</p><p>The method returns a reference to an <strong>effect-variable interface</strong> whether or not a variable is found. <strong>ID3DX11Effect::IsValid</strong> should be called to verify whether or not the name exists.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476841</doc-id>
        /// <unmanaged>ID3DX11EffectVariable* ID3DX11Effect::GetVariableByName([In] const char* Name)</unmanaged>
        /// <unmanaged-short>ID3DX11Effect::GetVariableByName</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectVariable GetVariableByName(System.String name)
        {
            System.IntPtr name_;
            SharpDX.Direct3D11.EffectVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            name_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(name);
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (void *)name_, (*(void ***)this._nativePointer)[9]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectVariable(__result__native);
            else
                __result__ = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(name_);
            return __result__;
        }

        /// <summary>
        /// <p>Get a variable by semantic.</p>
        /// </summary>
        /// <param name = "semantic"><dd>  <p>The semantic name.</p> </dd></param>
        /// <returns><p>A reference to the effect variable indicated by the Semantic. See <strong><see cref = "SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <p>Each effect variable can have a semantic attached, which is a user defined metadata string. Some  system-value semantics are reserved words that trigger built in functionality by pipeline stages.</p><p>The method returns a reference to an <strong>effect-variable interface</strong> if a variable is not found; you can  call <strong>ID3DX11Effect::IsValid</strong> to verify whether or not the semantic exists.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476842</doc-id>
        /// <unmanaged>ID3DX11EffectVariable* ID3DX11Effect::GetVariableBySemantic([In] const char* Semantic)</unmanaged>
        /// <unmanaged-short>ID3DX11Effect::GetVariableBySemantic</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectVariable GetVariableBySemantic(System.String semantic)
        {
            System.IntPtr semantic_;
            SharpDX.Direct3D11.EffectVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            semantic_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(semantic);
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (void *)semantic_, (*(void ***)this._nativePointer)[10]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectVariable(__result__native);
            else
                __result__ = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(semantic_);
            return __result__;
        }

        /// <summary>
        /// <p>Gets an effect group by index.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Index of the effect group.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectGroup"/></strong> interface.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476836</doc-id>
        /// <unmanaged>ID3DX11EffectGroup* ID3DX11Effect::GetGroupByIndex([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3DX11Effect::GetGroupByIndex</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectGroup GetGroupByIndex(System.Int32 index)
        {
            SharpDX.Direct3D11.EffectGroup __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, index, (*(void ***)this._nativePointer)[11]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectGroup(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Gets an effect group by name.</p>
        /// </summary>
        /// <param name = "name"><dd>  <p>Name of the effect group.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectGroup"/></strong> interface.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476837</doc-id>
        /// <unmanaged>ID3DX11EffectGroup* ID3DX11Effect::GetGroupByName([In] const char* Name)</unmanaged>
        /// <unmanaged-short>ID3DX11Effect::GetGroupByName</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectGroup GetGroupByName(System.String name)
        {
            System.IntPtr name_;
            SharpDX.Direct3D11.EffectGroup __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            name_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(name);
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (void *)name_, (*(void ***)this._nativePointer)[12]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectGroup(__result__native);
            else
                __result__ = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(name_);
            return __result__;
        }

        /// <summary>
        /// <p>Get a technique by index.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectTechnique"/></strong>.</p></returns>
        /// <remarks>
        /// <p>An effect contains one or more techniques; each technique contains one or more passes. You can access a technique using its name or with an index. </p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476838</doc-id>
        /// <unmanaged>ID3DX11EffectTechnique* ID3DX11Effect::GetTechniqueByIndex([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3DX11Effect::GetTechniqueByIndex</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectTechnique GetTechniqueByIndex(System.Int32 index)
        {
            SharpDX.Direct3D11.EffectTechnique __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, index, (*(void ***)this._nativePointer)[13]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectTechnique(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a technique by name.</p>
        /// </summary>
        /// <param name = "name"><dd>  <p>The name of the technique.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectTechnique"/></strong>. If a technique with the appropriate name is not found an invalid technique is returned. <strong>ID3DX11EffectTechnique::IsValid</strong> should be called on the returned technique to determine whether it is valid.</p></returns>
        /// <remarks>
        /// <p>An effect contains one or more techniques; each technique contains one or more passes. You can access a technique using its name or with an index.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476839</doc-id>
        /// <unmanaged>ID3DX11EffectTechnique* ID3DX11Effect::GetTechniqueByName([In] const char* Name)</unmanaged>
        /// <unmanaged-short>ID3DX11Effect::GetTechniqueByName</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectTechnique GetTechniqueByName(System.String name)
        {
            System.IntPtr name_;
            SharpDX.Direct3D11.EffectTechnique __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            name_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(name);
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (void *)name_, (*(void ***)this._nativePointer)[14]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectTechnique(__result__native);
            else
                __result__ = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(name_);
            return __result__;
        }

        /// <summary>
        /// <p>Gets a class linkage interface.</p>
        /// </summary>
        /// <returns><p>Returns a reference to an <strong><see cref = "SharpDX.Direct3D11.ClassLinkage"/></strong> interface.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476831</doc-id>
        /// <unmanaged>ID3D11ClassLinkage* ID3DX11Effect::GetClassLinkage()</unmanaged>
        /// <unmanaged-short>ID3DX11Effect::GetClassLinkage</unmanaged-short>
        internal unsafe SharpDX.Direct3D11.ClassLinkage GetClassLinkage()
        {
            SharpDX.Direct3D11.ClassLinkage __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[15]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.ClassLinkage(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Creates a copy of an effect interface.</p>
        /// </summary>
        /// <param name = "flags"><dd>  <p>Flags affecting the creation of the cloned effect. Can be 0 or one of the following values.</p> <table> <tr><th>Flag</th><th>Description</th></tr> <tr><td>D3DX11_EFFECT_CLONE_FORCE_NONSINGLE</td><td>Ignore all "single" qualifiers on cbuffers.  All cbuffers will have their own <strong><see cref = "SharpDX.Direct3D11.Buffer"/></strong>s created in the cloned effect.</td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "clonedEffectOut"><dd>  <p>Pointer to an <strong><see cref = "SharpDX.Direct3D11.Effect"/></strong> reference that will be set to the copy of the effect.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476830</doc-id>
        /// <unmanaged>HRESULT ID3DX11Effect::CloneEffect([In] unsigned int Flags,[Out] ID3DX11Effect** ppClonedEffect)</unmanaged>
        /// <unmanaged-short>ID3DX11Effect::CloneEffect</unmanaged-short>
        public unsafe void CloneEffect(System.Int32 flags, out SharpDX.Direct3D11.Effect clonedEffectOut)
        {
            System.IntPtr clonedEffectOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, flags, &clonedEffectOut_, (*(void ***)this._nativePointer)[16]);
            if (clonedEffectOut_ != System.IntPtr.Zero)
                clonedEffectOut = new SharpDX.Direct3D11.Effect(clonedEffectOut_);
            else
                clonedEffectOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Minimize the amount of memory required for an effect.</p>
        /// </summary>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>An effect uses memory space two different ways: to store the information required by the runtime to execute an effect, and to store the metadata  required to reflect information back to an application using the API. You can minimize the amount of memory required by an effect by  calling <strong>ID3DX11Effect::Optimize</strong> which removes the reflection metadata from memory. API methods to read variables will no  longer work once reflection data has been removed.</p><p>The following methods will fail after Optimize has been called on an effect.</p><ul> <li> <strong>ID3DX11Effect::GetConstantBufferByIndex</strong> </li> <li> <strong>ID3DX11Effect::GetConstantBufferByName</strong> </li> <li> <strong>ID3DX11Effect::GetDesc</strong> </li> <li> <strong>ID3DX11Effect::GetDevice</strong> </li> <li> <strong>ID3DX11Effect::GetTechniqueByIndex</strong> </li> <li> <strong>ID3DX11Effect::GetTechniqueByName</strong> </li> <li> <strong>ID3DX11Effect::GetVariableByIndex</strong> </li> <li> <strong>ID3DX11Effect::GetVariableByName</strong> </li> <li> <strong>ID3DX11Effect::GetVariableBySemantic</strong> </li> </ul><strong>Note</strong>??References retrieved with these methods before calling <strong>ID3DX11Effect::Optimize</strong> are still valid  after <strong>ID3DX11Effect::Optimize</strong> is called.  This allows the application to get all the variables, techniques, and passes it will use,  call Optimize, and then use the effect.?<strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476845</doc-id>
        /// <unmanaged>HRESULT ID3DX11Effect::Optimize()</unmanaged>
        /// <unmanaged-short>ID3DX11Effect::Optimize</unmanaged-short>
        public unsafe void Optimize()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[17]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Test an effect to see if the reflection metadata has been removed from memory.</p>
        /// </summary>
        /// <returns><p><strong>TRUE</strong> if the effect is optimized; otherwise <strong><see cref = "SharpDX.Result.False"/></strong>.</p></returns>
        /// <remarks>
        /// <p>An effect uses memory space two different ways: to store the information required by the runtime to execute an effect,  and to store the metadata required to reflect information back to an application using the API. You can minimize the amount of memory required by  an effect by calling <strong>ID3DX11Effect::Optimize</strong> which removes the reflection metadata from memory. Of course, API methods to read variables  will no longer work once reflection data has been removed.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476843</doc-id>
        /// <unmanaged>BOOL ID3DX11Effect::IsOptimized()</unmanaged>
        /// <unmanaged-short>ID3DX11Effect::IsOptimized</unmanaged-short>
        internal unsafe SharpDX.Mathematics.Interop.RawBool IsOptimized_()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[18]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("d664f4d7-3b81-4805-b277-c1df58c39f53")]
    public partial class EffectBlendVariable : SharpDX.Direct3D11.EffectVariable
    {
        public EffectBlendVariable(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectBlendVariable(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectBlendVariable(nativePtr);
        /// <summary>
        /// <p>Get a reference to a blend-state interface.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Index into an array of blend-state interfaces. If there is only one blend-state interface, use 0.</p> </dd></param>
        /// <param name = "stateOut"><dd>  <p>The address of a reference to a blend-state interface (see <strong><see cref = "SharpDX.Direct3D11.BlendState"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476655</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectBlendVariable::GetBlendState([In] unsigned int Index,[Out] ID3D11BlendState** ppState)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectBlendVariable::GetBlendState</unmanaged-short>
        public unsafe void GetBlendState(System.Int32 index, out SharpDX.Direct3D11.BlendState stateOut)
        {
            System.IntPtr stateOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, index, &stateOut_, (*(void ***)this._nativePointer)[31]);
            if (stateOut_ != System.IntPtr.Zero)
                stateOut = new SharpDX.Direct3D11.BlendState(stateOut_);
            else
                stateOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets an effect's blend-state.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Index into an array of blend-state interfaces. If there is only one blend-state interface, use 0.</p> </dd></param>
        /// <param name = "stateRef"><dd>  <p>A reference to an <strong><see cref = "SharpDX.Direct3D11.BlendState"/></strong> interface containing the blend-state to set.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476656</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectBlendVariable::SetBlendState([In] unsigned int Index,[In] ID3D11BlendState* pState)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectBlendVariable::SetBlendState</unmanaged-short>
        public unsafe void SetBlendState(System.Int32 index, SharpDX.Direct3D11.BlendState stateRef)
        {
            System.IntPtr stateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            stateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.Direct3D11.BlendState>(stateRef);
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, index, (void *)stateRef_, (*(void ***)this._nativePointer)[32]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Reverts a previously set blend-state.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Index into an array of blend-state interfaces. If there is only one blend-state interface, use 0.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476657</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectBlendVariable::UndoSetBlendState([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectBlendVariable::UndoSetBlendState</unmanaged-short>
        public unsafe void UndoSetBlendState(System.Int32 index)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, index, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a reference to a blend-state variable.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Index into an array of blend-state descriptions. If there is only one blend-state variable in the effect, use 0.</p> </dd></param>
        /// <param name = "descRef"><dd>  <p>A reference to a blend-state description (see <strong><see cref = "SharpDX.Direct3D11.BlendStateDescription"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>Effect variables are saved in memory in the backing store; when a technique is applied, the values in the backing store are copied to the device.  Backing store data can used to recreate the variable when necessary.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476654</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectBlendVariable::GetBackingStore([In] unsigned int Index,[Out] D3D11_BLEND_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectBlendVariable::GetBackingStore</unmanaged-short>
        public unsafe void GetBackingStore(System.Int32 index, out SharpDX.Direct3D11.BlendStateDescription descRef)
        {
            SharpDX.Direct3D11.BlendStateDescription.__Native descRef_ = default (SharpDX.Direct3D11.BlendStateDescription.__Native);
            descRef = default (SharpDX.Direct3D11.BlendStateDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, index, &descRef_, (*(void ***)this._nativePointer)[34]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("926a8053-2a39-4db4-9bde-cf649adebdc1")]
    public partial class EffectClassInstanceVariable : SharpDX.Direct3D11.EffectVariable
    {
        public EffectClassInstanceVariable(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectClassInstanceVariable(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectClassInstanceVariable(nativePtr);
        /// <summary>
        /// <p>Gets a class instance.</p>
        /// </summary>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476659</doc-id>
        /// <unmanaged>GetClassInstance</unmanaged>
        /// <unmanaged-short>GetClassInstance</unmanaged-short>
        public SharpDX.Direct3D11.ClassInstance ClassInstance
        {
            get
            {
                GetClassInstance(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets a class instance.</p>
        /// </summary>
        /// <param name = "classInstanceOut"><dd>  <p>Pointer to an <strong><see cref = "SharpDX.Direct3D11.ClassInstance"/></strong> reference that will be set to class instance.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476659</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectClassInstanceVariable::GetClassInstance([Out] ID3D11ClassInstance** ppClassInstance)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectClassInstanceVariable::GetClassInstance</unmanaged-short>
        internal unsafe void GetClassInstance(out SharpDX.Direct3D11.ClassInstance classInstanceOut)
        {
            System.IntPtr classInstanceOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, &classInstanceOut_, (*(void ***)this._nativePointer)[31]);
            if (classInstanceOut_ != System.IntPtr.Zero)
                classInstanceOut = new SharpDX.Direct3D11.ClassInstance(classInstanceOut_);
            else
                classInstanceOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("2cb6c733-82d2-4000-b3da-6219d9a99bf2")]
    public partial class EffectConstantBuffer : SharpDX.Direct3D11.EffectVariable
    {
        public EffectConstantBuffer(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectConstantBuffer(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectConstantBuffer(nativePtr);
        /// <summary>
        /// <p>Set a constant-buffer.</p>
        /// </summary>
        /// <param name = "constantBufferRef"><dd>  <p>A reference to a constant-buffer interface. See <strong><see cref = "SharpDX.Direct3D11.Buffer"/></strong>.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476673</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectConstantBuffer::SetConstantBuffer([In] ID3D11Buffer* pConstantBuffer)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectConstantBuffer::SetConstantBuffer</unmanaged-short>
        public unsafe void SetConstantBuffer(SharpDX.Direct3D11.Buffer constantBufferRef)
        {
            System.IntPtr constantBufferRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            constantBufferRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.Direct3D11.Buffer>(constantBufferRef);
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)constantBufferRef_, (*(void ***)this._nativePointer)[31]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Reverts a previously set constant buffer.</p>
        /// </summary>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476675</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectConstantBuffer::UndoSetConstantBuffer()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectConstantBuffer::UndoSetConstantBuffer</unmanaged-short>
        public unsafe void UndoSetConstantBuffer()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[32]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a constant-buffer.</p>
        /// </summary>
        /// <returns><dd>  <p>The address of a reference to a constant-buffer interface. See <strong><see cref = "SharpDX.Direct3D11.Buffer"/></strong>.</p> </dd></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476671</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectConstantBuffer::GetConstantBuffer([Out] ID3D11Buffer** ppConstantBuffer)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectConstantBuffer::GetConstantBuffer</unmanaged-short>
        public unsafe SharpDX.Direct3D11.Buffer GetConstantBuffer()
        {
            SharpDX.Direct3D11.Buffer constantBufferOut;
            System.IntPtr constantBufferOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, &constantBufferOut_, (*(void ***)this._nativePointer)[33]);
            if (constantBufferOut_ != System.IntPtr.Zero)
                constantBufferOut = new SharpDX.Direct3D11.Buffer(constantBufferOut_);
            else
                constantBufferOut = null;
            __result__.CheckError();
            return constantBufferOut;
        }

        /// <summary>
        /// <p>Set a texture-buffer.</p>
        /// </summary>
        /// <param name = "textureBufferRef"><dd>  <p>A reference to a shader-resource-view interface for accessing a texture buffer.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476674</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectConstantBuffer::SetTextureBuffer([In] ID3D11ShaderResourceView* pTextureBuffer)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectConstantBuffer::SetTextureBuffer</unmanaged-short>
        public unsafe void SetTextureBuffer(SharpDX.Direct3D11.ShaderResourceView textureBufferRef)
        {
            System.IntPtr textureBufferRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            textureBufferRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.Direct3D11.ShaderResourceView>(textureBufferRef);
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)textureBufferRef_, (*(void ***)this._nativePointer)[34]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Reverts a previously set texture buffer.</p>
        /// </summary>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476676</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectConstantBuffer::UndoSetTextureBuffer()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectConstantBuffer::UndoSetTextureBuffer</unmanaged-short>
        public unsafe void UndoSetTextureBuffer()
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[35]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a texture-buffer.</p>
        /// </summary>
        /// <returns><dd>  <p>The address of a reference to a shader-resource-view interface for accessing a texture buffer. See <strong><see cref = "SharpDX.Direct3D11.ShaderResourceView"/></strong>.</p> </dd></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476672</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectConstantBuffer::GetTextureBuffer([Out] ID3D11ShaderResourceView** ppTextureBuffer)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectConstantBuffer::GetTextureBuffer</unmanaged-short>
        public unsafe SharpDX.Direct3D11.ShaderResourceView GetTextureBuffer()
        {
            SharpDX.Direct3D11.ShaderResourceView textureBufferOut;
            System.IntPtr textureBufferOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, &textureBufferOut_, (*(void ***)this._nativePointer)[36]);
            if (textureBufferOut_ != System.IntPtr.Zero)
                textureBufferOut = new SharpDX.Direct3D11.ShaderResourceView(textureBufferOut_);
            else
                textureBufferOut = null;
            __result__.CheckError();
            return textureBufferOut;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("69b5751b-61a5-48e5-bd41-d93988111563")]
    public partial class EffectDepthStencilVariable : SharpDX.Direct3D11.EffectVariable
    {
        public EffectDepthStencilVariable(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectDepthStencilVariable(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectDepthStencilVariable(nativePtr);
        /// <summary>
        /// <p>Get a reference to a depth-stencil interface.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Index into an array of depth-stencil interfaces. If there is only one depth-stencil interface, use 0.</p> </dd></param>
        /// <param name = "stateOut"><dd>  <p>The address of a reference to a blend-state interface (see <strong><see cref = "SharpDX.Direct3D11.DepthStencilState"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476679</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectDepthStencilVariable::GetDepthStencilState([In] unsigned int Index,[Out] ID3D11DepthStencilState** ppState)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectDepthStencilVariable::GetDepthStencilState</unmanaged-short>
        public unsafe void GetDepthStencilState(System.Int32 index, out SharpDX.Direct3D11.DepthStencilState stateOut)
        {
            System.IntPtr stateOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, index, &stateOut_, (*(void ***)this._nativePointer)[31]);
            if (stateOut_ != System.IntPtr.Zero)
                stateOut = new SharpDX.Direct3D11.DepthStencilState(stateOut_);
            else
                stateOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets the depth stencil state.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Index into an array of depth-stencil interfaces. If there is only one depth-stencil interface, use 0.</p> </dd></param>
        /// <param name = "stateRef"><dd>  <p>Pointer to an <strong><see cref = "SharpDX.Direct3D11.DepthStencilState"/></strong> interface containing the new depth stencil state.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476680</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectDepthStencilVariable::SetDepthStencilState([In] unsigned int Index,[In] ID3D11DepthStencilState* pState)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectDepthStencilVariable::SetDepthStencilState</unmanaged-short>
        public unsafe void SetDepthStencilState(System.Int32 index, SharpDX.Direct3D11.DepthStencilState stateRef)
        {
            System.IntPtr stateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            stateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.Direct3D11.DepthStencilState>(stateRef);
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, index, (void *)stateRef_, (*(void ***)this._nativePointer)[32]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Reverts a previously set depth stencil state.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Index into an array of depth-stencil interfaces. If there is only one depth-stencil interface, use 0.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476681</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectDepthStencilVariable::UndoSetDepthStencilState([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectDepthStencilVariable::UndoSetDepthStencilState</unmanaged-short>
        public unsafe void UndoSetDepthStencilState(System.Int32 index)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, index, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a reference to a variable that contains depth-stencil state.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Index into an array of depth-stencil-state descriptions. If there is only one depth-stencil variable in the effect, use 0.</p> </dd></param>
        /// <param name = "descRef"><dd>  <p>A reference to a depth-stencil-state description (see <strong><see cref = "SharpDX.Direct3D11.DepthStencilStateDescription"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>Effect variables are saved in memory in the backing store; when a technique is applied, the values in the backing store are copied to the device.  Backing store data can used to recreate the variable when necessary.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476678</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectDepthStencilVariable::GetBackingStore([In] unsigned int Index,[Out] D3D11_DEPTH_STENCIL_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectDepthStencilVariable::GetBackingStore</unmanaged-short>
        public unsafe void GetBackingStore(System.Int32 index, out SharpDX.Direct3D11.DepthStencilStateDescription descRef)
        {
            descRef = default (SharpDX.Direct3D11.DepthStencilStateDescription);
            SharpDX.Result __result__;
            fixed (void *descRef_ = &descRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, index, descRef_, (*(void ***)this._nativePointer)[34]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("33c648ac-2e9e-4a2e-9cd6-de31acc5b347")]
    public partial class EffectDepthStencilViewVariable : SharpDX.Direct3D11.EffectVariable
    {
        public EffectDepthStencilViewVariable(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectDepthStencilViewVariable(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectDepthStencilViewVariable(nativePtr);
        /// <summary>
        /// <p>Set a depth-stencil-view resource.</p>
        /// </summary>
        /// <param name = "resourceRef"><dd>  <p>A reference to a depth-stencil-view interface. See <strong><see cref = "SharpDX.Direct3D11.DepthStencilView"/></strong>.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476685</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectDepthStencilViewVariable::SetDepthStencil([In] ID3D11DepthStencilView* pResource)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectDepthStencilViewVariable::SetDepthStencil</unmanaged-short>
        public unsafe void SetDepthStencil(SharpDX.Direct3D11.DepthStencilView resourceRef)
        {
            System.IntPtr resourceRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resourceRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.Direct3D11.DepthStencilView>(resourceRef);
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resourceRef_, (*(void ***)this._nativePointer)[31]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a depth-stencil-view resource.</p>
        /// </summary>
        /// <returns><dd>  <p>The address of a reference to a depth-stencil-view interface. See <strong><see cref = "SharpDX.Direct3D11.DepthStencilView"/></strong>.</p> </dd></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476683</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectDepthStencilViewVariable::GetDepthStencil([Out] ID3D11DepthStencilView** ppResource)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectDepthStencilViewVariable::GetDepthStencil</unmanaged-short>
        public unsafe SharpDX.Direct3D11.DepthStencilView GetDepthStencil()
        {
            SharpDX.Direct3D11.DepthStencilView resourceOut;
            System.IntPtr resourceOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, &resourceOut_, (*(void ***)this._nativePointer)[32]);
            if (resourceOut_ != System.IntPtr.Zero)
                resourceOut = new SharpDX.Direct3D11.DepthStencilView(resourceOut_);
            else
                resourceOut = null;
            __result__.CheckError();
            return resourceOut;
        }

        /// <summary>
        /// <p>Set an array of depth-stencil-view resources.</p>
        /// </summary>
        /// <param name = "resourcesOut"><dd>  <p>A reference to an array of depth-stencil-view interfaces. See <strong><see cref = "SharpDX.Direct3D11.DepthStencilView"/></strong>.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>The zero-based array index to set the first interface.</p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476686</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectDepthStencilViewVariable::SetDepthStencilArray([In, Buffer] ID3D11DepthStencilView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectDepthStencilViewVariable::SetDepthStencilArray</unmanaged-short>
        internal unsafe void SetDepthStencilArray(SharpDX.Direct3D11.DepthStencilView[] resourcesOut, System.Int32 offset, System.Int32 count)
        {
            System.IntPtr*resourcesOut_;
            resourcesOut_ = (System.IntPtr*)0;
            if (resourcesOut != null)
            {
                System.IntPtr*_resourcesOut = stackalloc System.IntPtr[resourcesOut.Length];
                resourcesOut_ = _resourcesOut;
            }

            SharpDX.Result __result__;
            if (resourcesOut != null)
                for (int i = 0; i < resourcesOut.Length; ++i)
                    (resourcesOut_)[i] = SharpDX.CppObject.ToCallbackPtr<SharpDX.Direct3D11.DepthStencilView>(resourcesOut[i]);
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resourcesOut_, offset, count, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get an array of depth-stencil-view resources.</p>
        /// </summary>
        /// <param name = "resourcesOut"><dd>  <p>A reference to an array of depth-stencil-view interfaces. See <strong><see cref = "SharpDX.Direct3D11.DepthStencilView"/></strong>.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>The zero-based array index to get the first interface.</p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476684</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectDepthStencilViewVariable::GetDepthStencilArray([Out, Buffer] ID3D11DepthStencilView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectDepthStencilViewVariable::GetDepthStencilArray</unmanaged-short>
        internal unsafe void GetDepthStencilArray(SharpDX.Direct3D11.DepthStencilView[] resourcesOut, System.Int32 offset, System.Int32 count)
        {
            System.IntPtr*resourcesOut_;
            resourcesOut_ = (System.IntPtr*)0;
            {
                System.IntPtr*_resourcesOut = stackalloc System.IntPtr[resourcesOut.Length];
                resourcesOut_ = _resourcesOut;
            }

            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resourcesOut_, offset, count, (*(void ***)this._nativePointer)[34]);
            for (int i = 0; i < resourcesOut.Length; ++i)
                if ((resourcesOut_)[i] != System.IntPtr.Zero)
                    resourcesOut[i] = new SharpDX.Direct3D11.DepthStencilView((resourcesOut_)[i]);
                else
                    resourcesOut[i] = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Set an array of depth-stencil-view resources.</p>
        /// </summary>
        /// <param name = "resourcesOut"><dd>  <p>A reference to an array of depth-stencil-view interfaces. See <strong><see cref = "SharpDX.Direct3D11.DepthStencilView"/></strong>.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>The zero-based array index to set the first interface.</p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476686</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectDepthStencilViewVariable::SetDepthStencilArray([In, Buffer] ID3D11DepthStencilView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectDepthStencilViewVariable::SetDepthStencilArray</unmanaged-short>
        internal unsafe void SetDepthStencilArray(SharpDX.ComArray<SharpDX.Direct3D11.DepthStencilView> resourcesOut, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)(resourcesOut?.NativePointer ?? System.IntPtr.Zero), offset, count, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Set an array of depth-stencil-view resources.</p>
        /// </summary>
        /// <param name = "resourcesOut"><dd>  <p>A reference to an array of depth-stencil-view interfaces. See <strong><see cref = "SharpDX.Direct3D11.DepthStencilView"/></strong>.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>The zero-based array index to set the first interface.</p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476686</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectDepthStencilViewVariable::SetDepthStencilArray([In, Buffer] ID3D11DepthStencilView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectDepthStencilViewVariable::SetDepthStencilArray</unmanaged-short>
        private unsafe void SetDepthStencilArray(System.IntPtr resourcesOut, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resourcesOut, offset, count, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("03074acf-97de-485f-b201-cb775264afd6")]
    public partial class EffectGroup : SharpDX.ComObject
    {
        public EffectGroup(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectGroup(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectGroup(nativePtr);
        /// <summary>
        /// <p>Test an effect to see if it contains valid syntax.</p>
        /// </summary>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476693</doc-id>
        /// <unmanaged>IsValid</unmanaged>
        /// <unmanaged-short>IsValid</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsValid
        {
            get => IsValid_();
        }

        /// <summary>
        /// <p>Gets a group description.</p>
        /// </summary>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476690</doc-id>
        /// <unmanaged>GetDesc</unmanaged>
        /// <unmanaged-short>GetDesc</unmanaged-short>
        public SharpDX.Direct3D11.EffectGroupDescription Description
        {
            get
            {
                GetDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Test an effect to see if it contains valid syntax.</p>
        /// </summary>
        /// <returns><p><strong>TRUE</strong> if the code syntax is valid; otherwise <strong><see cref = "SharpDX.Result.False"/></strong>.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476693</doc-id>
        /// <unmanaged>BOOL ID3DX11EffectGroup::IsValid()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectGroup::IsValid</unmanaged-short>
        internal unsafe SharpDX.Mathematics.Interop.RawBool IsValid_()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// <p>Gets a group description.</p>
        /// </summary>
        /// <param name = "descRef"><dd>  <p>A reference to a <strong><see cref = "SharpDX.Direct3D11.EffectGroupDescription"/></strong> structure.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476690</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectGroup::GetDesc([Out] D3DX11_GROUP_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectGroup::GetDesc</unmanaged-short>
        internal unsafe void GetDescription(out SharpDX.Direct3D11.EffectGroupDescription descRef)
        {
            SharpDX.Direct3D11.EffectGroupDescription.__Native descRef_ = default (SharpDX.Direct3D11.EffectGroupDescription.__Native);
            descRef = default (SharpDX.Direct3D11.EffectGroupDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, &descRef_, (*(void ***)this._nativePointer)[4]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get an annotation by index.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Index of the annotation.</p> </dd></param>
        /// <returns><p>Pointer to an <strong><see cref = "SharpDX.Direct3D11.EffectVariable"/></strong> interface.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476688</doc-id>
        /// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectGroup::GetAnnotationByIndex([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectGroup::GetAnnotationByIndex</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectVariable GetAnnotationByIndex(System.Int32 index)
        {
            SharpDX.Direct3D11.EffectVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, index, (*(void ***)this._nativePointer)[5]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get an annotation by name.</p>
        /// </summary>
        /// <param name = "name"><dd>  <p>The name of the annotation.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectVariable"/></strong>. Note that if the annotation is not found the <strong><see cref = "SharpDX.Direct3D11.EffectVariable"/></strong> returned will be empty. The <strong>ID3DX11EffectVariable::IsValid</strong> method should be called to determine whether the annotation was found.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476689</doc-id>
        /// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectGroup::GetAnnotationByName([In] const char* Name)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectGroup::GetAnnotationByName</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectVariable GetAnnotationByName(System.String name)
        {
            System.IntPtr name_;
            SharpDX.Direct3D11.EffectVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            name_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(name);
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (void *)name_, (*(void ***)this._nativePointer)[6]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectVariable(__result__native);
            else
                __result__ = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(name_);
            return __result__;
        }

        /// <summary>
        /// <p>Get a technique by index.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectTechnique"/></strong>.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476691</doc-id>
        /// <unmanaged>ID3DX11EffectTechnique* ID3DX11EffectGroup::GetTechniqueByIndex([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectGroup::GetTechniqueByIndex</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectTechnique GetTechniqueByIndex(System.Int32 index)
        {
            SharpDX.Direct3D11.EffectTechnique __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, index, (*(void ***)this._nativePointer)[7]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectTechnique(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a technique by name.</p>
        /// </summary>
        /// <param name = "name"><dd>  <p>The name of the technique.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectTechnique"/></strong>, or <strong><c>null</c></strong> if the technique is not found.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476692</doc-id>
        /// <unmanaged>ID3DX11EffectTechnique* ID3DX11EffectGroup::GetTechniqueByName([In] const char* Name)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectGroup::GetTechniqueByName</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectTechnique GetTechniqueByName(System.String name)
        {
            System.IntPtr name_;
            SharpDX.Direct3D11.EffectTechnique __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            name_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(name);
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (void *)name_, (*(void ***)this._nativePointer)[8]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectTechnique(__result__native);
            else
                __result__ = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(name_);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("516c8cd8-1c80-40a4-b19b-0688792f11a5")]
    public partial class EffectInterfaceVariable : SharpDX.Direct3D11.EffectVariable
    {
        public EffectInterfaceVariable(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectInterfaceVariable(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectInterfaceVariable(nativePtr);
        /// <summary>
        /// <p>Get or sets a class instance.</p>
        /// </summary>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476695</doc-id>
        /// <unmanaged>GetClassInstance / SetClassInstance</unmanaged>
        /// <unmanaged-short>GetClassInstance</unmanaged-short>
        public SharpDX.Direct3D11.EffectClassInstanceVariable ClassInstance
        {
            get
            {
                GetClassInstance(out var __output__);
                return __output__;
            }

            set => SetClassInstance(value);
        }

        /// <summary>
        /// <p>Sets a class instance.</p>
        /// </summary>
        /// <param name = "effectClassInstanceRef"><dd>  <p>Pointer to an <strong><see cref = "SharpDX.Direct3D11.EffectClassInstanceVariable"/></strong> interface.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476696</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectInterfaceVariable::SetClassInstance([In] ID3DX11EffectClassInstanceVariable* pEffectClassInstance)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectInterfaceVariable::SetClassInstance</unmanaged-short>
        internal unsafe void SetClassInstance(SharpDX.Direct3D11.EffectClassInstanceVariable effectClassInstanceRef)
        {
            System.IntPtr effectClassInstanceRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            effectClassInstanceRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.Direct3D11.EffectClassInstanceVariable>(effectClassInstanceRef);
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)effectClassInstanceRef_, (*(void ***)this._nativePointer)[31]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a class instance.</p>
        /// </summary>
        /// <param name = "effectClassInstanceOut"><dd>  <p>Pointer to an <strong><see cref = "SharpDX.Direct3D11.EffectClassInstanceVariable"/></strong> reference that will be set to the class instance.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476695</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectInterfaceVariable::GetClassInstance([Out] ID3DX11EffectClassInstanceVariable** ppEffectClassInstance)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectInterfaceVariable::GetClassInstance</unmanaged-short>
        internal unsafe void GetClassInstance(out SharpDX.Direct3D11.EffectClassInstanceVariable effectClassInstanceOut)
        {
            System.IntPtr effectClassInstanceOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, &effectClassInstanceOut_, (*(void ***)this._nativePointer)[32]);
            if (effectClassInstanceOut_ != System.IntPtr.Zero)
                effectClassInstanceOut = new SharpDX.Direct3D11.EffectClassInstanceVariable(effectClassInstanceOut_);
            else
                effectClassInstanceOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("e1096cf4-c027-419a-8d86-d29173dc803e")]
    public partial class EffectMatrixVariable : SharpDX.Direct3D11.EffectVariable
    {
        public EffectMatrixVariable(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectMatrixVariable(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectMatrixVariable(nativePtr);
        /// <summary>
        /// <p>Set a floating-point matrix.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the first element in the matrix.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476702</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::SetMatrix([In] const SHARPDX_MATRIX* pData)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectMatrixVariable::SetMatrix</unmanaged-short>
        public unsafe void SetMatrix(ref SharpDX.Mathematics.Interop.RawMatrix dataRef)
        {
            SharpDX.Result __result__;
            fixed (void *dataRef_ = &dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, (*(void ***)this._nativePointer)[31]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a matrix.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the first element in a matrix.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476698</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrix([Out] SHARPDX_MATRIX* pData)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectMatrixVariable::GetMatrix</unmanaged-short>
        internal unsafe void GetMatrix(out SharpDX.Mathematics.Interop.RawMatrix dataRef)
        {
            dataRef = default (SharpDX.Mathematics.Interop.RawMatrix);
            SharpDX.Result __result__;
            fixed (void *dataRef_ = &dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, (*(void ***)this._nativePointer)[32]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Set an array of floating-point matrices.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the first matrix.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>The number of matrix elements to skip from the start of the array.</p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of elements to set.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476703</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::SetMatrixArray([In, Buffer] const SHARPDX_MATRIX* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectMatrixVariable::SetMatrixArray</unmanaged-short>
        internal unsafe void SetMatrixArray(SharpDX.Mathematics.Interop.RawMatrix[] dataRef, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            fixed (void *dataRef_ = dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, offset, count, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get an array of matrices.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the first element of the first matrix in an array of matrices.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>The offset (in number of matrices) between the start of the array and the first matrix returned.</p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of matrices in the returned array.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476699</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrixArray([Out, Buffer] SHARPDX_MATRIX* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectMatrixVariable::GetMatrixArray</unmanaged-short>
        internal unsafe void GetMatrixArray(SharpDX.Mathematics.Interop.RawMatrix[] dataRef, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            fixed (void *dataRef_ = dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, offset, count, (*(void ***)this._nativePointer)[34]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dataOut">No documentation.</param>
        /// <param name = "offset">No documentation.</param>
        /// <param name = "count">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::SetMatrixPointerArray([In, Buffer] const float** ppData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectMatrixVariable::SetMatrixPointerArray</unmanaged-short>
        internal unsafe void SetMatrixPointerArray(System.Single[] dataOut, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            fixed (void *dataOut_ = dataOut)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataOut_, offset, count, (*(void ***)this._nativePointer)[35]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dataOut">No documentation.</param>
        /// <param name = "offset">No documentation.</param>
        /// <param name = "count">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrixPointerArray([Out, Buffer] float** ppData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectMatrixVariable::GetMatrixPointerArray</unmanaged-short>
        internal unsafe void GetMatrixPointerArray(System.Single[] dataOut, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            fixed (void *dataOut_ = dataOut)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataOut_, offset, count, (*(void ***)this._nativePointer)[36]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Transpose and set a floating-point matrix.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the first element of a matrix.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa).</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476704</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::SetMatrixTranspose([In] const SHARPDX_MATRIX* pData)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectMatrixVariable::SetMatrixTranspose</unmanaged-short>
        public unsafe void SetMatrixTranspose(ref SharpDX.Mathematics.Interop.RawMatrix dataRef)
        {
            SharpDX.Result __result__;
            fixed (void *dataRef_ = &dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, (*(void ***)this._nativePointer)[37]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Transpose and get a floating-point matrix.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the first element of a transposed matrix.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa).</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476700</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrixTranspose([Out] SHARPDX_MATRIX* pData)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectMatrixVariable::GetMatrixTranspose</unmanaged-short>
        internal unsafe void GetMatrixTranspose(out SharpDX.Mathematics.Interop.RawMatrix dataRef)
        {
            dataRef = default (SharpDX.Mathematics.Interop.RawMatrix);
            SharpDX.Result __result__;
            fixed (void *dataRef_ = &dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, (*(void ***)this._nativePointer)[38]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Transpose and set an array of floating-point matrices.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to an array of matrices.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>The offset (in number of matrices) between the start of the array and the first matrix to set.</p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of matrices in the array to set.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa).</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476705</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::SetMatrixTransposeArray([In, Buffer] const SHARPDX_MATRIX* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectMatrixVariable::SetMatrixTransposeArray</unmanaged-short>
        internal unsafe void SetMatrixTransposeArray(SharpDX.Mathematics.Interop.RawMatrix[] dataRef, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            fixed (void *dataRef_ = dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, offset, count, (*(void ***)this._nativePointer)[39]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Transpose and get an array of floating-point matrices.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the first element of an array of tranposed matrices.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>The offset (in number of matrices) between the start of the array and the first matrix to get.</p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of matrices in the array to get.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa).</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476701</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrixTransposeArray([Out, Buffer] SHARPDX_MATRIX* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectMatrixVariable::GetMatrixTransposeArray</unmanaged-short>
        internal unsafe void GetMatrixTransposeArray(SharpDX.Mathematics.Interop.RawMatrix[] dataRef, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            fixed (void *dataRef_ = dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, offset, count, (*(void ***)this._nativePointer)[40]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dataOut">No documentation.</param>
        /// <param name = "offset">No documentation.</param>
        /// <param name = "count">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::SetMatrixTransposePointerArray([In, Buffer] const float** ppData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectMatrixVariable::SetMatrixTransposePointerArray</unmanaged-short>
        internal unsafe void SetMatrixTransposePointerArray(System.Single[] dataOut, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            fixed (void *dataOut_ = dataOut)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataOut_, offset, count, (*(void ***)this._nativePointer)[41]);
            __result__.CheckError();
        }

        /// <summary>
        /// No documentation.
        /// </summary>
        /// <param name = "dataOut">No documentation.</param>
        /// <param name = "offset">No documentation.</param>
        /// <param name = "count">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrixTransposePointerArray([Out, Buffer] float** ppData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectMatrixVariable::GetMatrixTransposePointerArray</unmanaged-short>
        internal unsafe void GetMatrixTransposePointerArray(System.Single[] dataOut, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            fixed (void *dataOut_ = dataOut)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataOut_, offset, count, (*(void ***)this._nativePointer)[42]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("3437cec4-4ac1-4d87-8916-f4bd5a41380c")]
    public partial class EffectPass : SharpDX.ComObject
    {
        public EffectPass(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectPass(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectPass(nativePtr);
        /// <summary>
        /// <p>Test a pass to see if it contains valid syntax.</p>
        /// </summary>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476718</doc-id>
        /// <unmanaged>IsValid</unmanaged>
        /// <unmanaged-short>IsValid</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsValid
        {
            get => IsValid_();
        }

        /// <summary>
        /// <p>Get a pass description.</p>
        /// </summary>
        /// <remarks>
        /// <p>A pass is a block of code that sets render state and shaders (which in turn sets constant buffers, samplers and textures).  An effect technique contains one or more passes.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476712</doc-id>
        /// <unmanaged>GetDesc</unmanaged>
        /// <unmanaged-short>GetDesc</unmanaged-short>
        public SharpDX.Direct3D11.EffectPassDescription Description
        {
            get
            {
                GetDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Get a vertex-shader description.</p>
        /// </summary>
        /// <remarks>
        /// <p>An effect pass can contain render state assignments and shader object assignments.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476717</doc-id>
        /// <unmanaged>GetVertexShaderDesc</unmanaged>
        /// <unmanaged-short>GetVertexShaderDesc</unmanaged-short>
        public SharpDX.Direct3D11.EffectPassShaderDescription VertexShaderDescription
        {
            get
            {
                GetVertexShaderDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Get a geometry-shader description.</p>
        /// </summary>
        /// <remarks>
        /// <p>An effect pass can contain render state assignments and shader object assignments.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476714</doc-id>
        /// <unmanaged>GetGeometryShaderDesc</unmanaged>
        /// <unmanaged-short>GetGeometryShaderDesc</unmanaged-short>
        public SharpDX.Direct3D11.EffectPassShaderDescription GeometryShaderDescription
        {
            get
            {
                GetGeometryShaderDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Get a pixel-shader description.</p>
        /// </summary>
        /// <remarks>
        /// <p>An effect pass can contain render state assignments and shader object assignments.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476716</doc-id>
        /// <unmanaged>GetPixelShaderDesc</unmanaged>
        /// <unmanaged-short>GetPixelShaderDesc</unmanaged-short>
        public SharpDX.Direct3D11.EffectPassShaderDescription PixelShaderDescription
        {
            get
            {
                GetPixelShaderDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Get hull-shader description.</p>
        /// </summary>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476715</doc-id>
        /// <unmanaged>GetHullShaderDesc</unmanaged>
        /// <unmanaged-short>GetHullShaderDesc</unmanaged-short>
        public SharpDX.Direct3D11.EffectPassShaderDescription HullShaderDescription
        {
            get
            {
                GetHullShaderDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Get a domain-shader description.</p>
        /// </summary>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476713</doc-id>
        /// <unmanaged>GetDomainShaderDesc</unmanaged>
        /// <unmanaged-short>GetDomainShaderDesc</unmanaged-short>
        public SharpDX.Direct3D11.EffectPassShaderDescription DomainShaderDescription
        {
            get
            {
                GetDomainShaderDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Get a compute-shader description.</p>
        /// </summary>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476711</doc-id>
        /// <unmanaged>GetComputeShaderDesc</unmanaged>
        /// <unmanaged-short>GetComputeShaderDesc</unmanaged-short>
        public SharpDX.Direct3D11.EffectPassShaderDescription ComputeShaderDescription
        {
            get
            {
                GetComputeShaderDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Test a pass to see if it contains valid syntax.</p>
        /// </summary>
        /// <returns><p><strong>TRUE</strong> if the code syntax is valid; otherwise <strong><see cref = "SharpDX.Result.False"/></strong>.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476718</doc-id>
        /// <unmanaged>BOOL ID3DX11EffectPass::IsValid()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectPass::IsValid</unmanaged-short>
        internal unsafe SharpDX.Mathematics.Interop.RawBool IsValid_()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// <p>Get a pass description.</p>
        /// </summary>
        /// <param name = "descRef"><dd>  <p>A reference to a pass description (see <strong><see cref = "SharpDX.Direct3D11.EffectPassDescription"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>A pass is a block of code that sets render state and shaders (which in turn sets constant buffers, samplers and textures).  An effect technique contains one or more passes.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476712</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectPass::GetDesc([Out] D3DX11_PASS_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectPass::GetDesc</unmanaged-short>
        internal unsafe void GetDescription(out SharpDX.Direct3D11.EffectPassDescription descRef)
        {
            SharpDX.Direct3D11.EffectPassDescription.__Native descRef_ = default (SharpDX.Direct3D11.EffectPassDescription.__Native);
            descRef = default (SharpDX.Direct3D11.EffectPassDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, &descRef_, (*(void ***)this._nativePointer)[4]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a vertex-shader description.</p>
        /// </summary>
        /// <param name = "descRef"><dd>  <p>A reference to a vertex-shader description (see <strong><see cref = "SharpDX.Direct3D11.EffectPassShaderDescription"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>An effect pass can contain render state assignments and shader object assignments.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476717</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectPass::GetVertexShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectPass::GetVertexShaderDesc</unmanaged-short>
        internal unsafe void GetVertexShaderDescription(out SharpDX.Direct3D11.EffectPassShaderDescription descRef)
        {
            descRef = default (SharpDX.Direct3D11.EffectPassShaderDescription);
            SharpDX.Result __result__;
            fixed (void *descRef_ = &descRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, descRef_, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a geometry-shader description.</p>
        /// </summary>
        /// <param name = "descRef"><dd>  <p>A reference to a geometry-shader description (see <strong><see cref = "SharpDX.Direct3D11.EffectPassShaderDescription"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>An effect pass can contain render state assignments and shader object assignments.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476714</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectPass::GetGeometryShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectPass::GetGeometryShaderDesc</unmanaged-short>
        internal unsafe void GetGeometryShaderDescription(out SharpDX.Direct3D11.EffectPassShaderDescription descRef)
        {
            descRef = default (SharpDX.Direct3D11.EffectPassShaderDescription);
            SharpDX.Result __result__;
            fixed (void *descRef_ = &descRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, descRef_, (*(void ***)this._nativePointer)[6]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a pixel-shader description.</p>
        /// </summary>
        /// <param name = "descRef"><dd>  <p>A reference to a pixel-shader description (see <strong><see cref = "SharpDX.Direct3D11.EffectPassShaderDescription"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>An effect pass can contain render state assignments and shader object assignments.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476716</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectPass::GetPixelShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectPass::GetPixelShaderDesc</unmanaged-short>
        internal unsafe void GetPixelShaderDescription(out SharpDX.Direct3D11.EffectPassShaderDescription descRef)
        {
            descRef = default (SharpDX.Direct3D11.EffectPassShaderDescription);
            SharpDX.Result __result__;
            fixed (void *descRef_ = &descRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, descRef_, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get hull-shader description.</p>
        /// </summary>
        /// <param name = "descRef"><dd>  <p>A reference to a hull-shader description (see <strong><see cref = "SharpDX.Direct3D11.EffectPassShaderDescription"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476715</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectPass::GetHullShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectPass::GetHullShaderDesc</unmanaged-short>
        internal unsafe void GetHullShaderDescription(out SharpDX.Direct3D11.EffectPassShaderDescription descRef)
        {
            descRef = default (SharpDX.Direct3D11.EffectPassShaderDescription);
            SharpDX.Result __result__;
            fixed (void *descRef_ = &descRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, descRef_, (*(void ***)this._nativePointer)[8]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a domain-shader description.</p>
        /// </summary>
        /// <param name = "descRef"><dd>  <p>A reference to a domain-shader description (see <strong><see cref = "SharpDX.Direct3D11.EffectPassShaderDescription"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476713</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectPass::GetDomainShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectPass::GetDomainShaderDesc</unmanaged-short>
        internal unsafe void GetDomainShaderDescription(out SharpDX.Direct3D11.EffectPassShaderDescription descRef)
        {
            descRef = default (SharpDX.Direct3D11.EffectPassShaderDescription);
            SharpDX.Result __result__;
            fixed (void *descRef_ = &descRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, descRef_, (*(void ***)this._nativePointer)[9]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a compute-shader description.</p>
        /// </summary>
        /// <param name = "descRef"><dd>  <p>A reference to a compute-shader description (see <strong><see cref = "SharpDX.Direct3D11.EffectPassShaderDescription"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476711</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectPass::GetComputeShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectPass::GetComputeShaderDesc</unmanaged-short>
        internal unsafe void GetComputeShaderDescription(out SharpDX.Direct3D11.EffectPassShaderDescription descRef)
        {
            descRef = default (SharpDX.Direct3D11.EffectPassShaderDescription);
            SharpDX.Result __result__;
            fixed (void *descRef_ = &descRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, descRef_, (*(void ***)this._nativePointer)[10]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get an annotation by index.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476709</doc-id>
        /// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectPass::GetAnnotationByIndex([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectPass::GetAnnotationByIndex</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectVariable GetAnnotationByIndex(System.Int32 index)
        {
            SharpDX.Direct3D11.EffectVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, index, (*(void ***)this._nativePointer)[11]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get an annotation by name.</p>
        /// </summary>
        /// <param name = "name"><dd>  <p>The name of the annotation.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476710</doc-id>
        /// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectPass::GetAnnotationByName([In] const char* Name)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectPass::GetAnnotationByName</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectVariable GetAnnotationByName(System.String name)
        {
            System.IntPtr name_;
            SharpDX.Direct3D11.EffectVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            name_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(name);
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (void *)name_, (*(void ***)this._nativePointer)[12]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectVariable(__result__native);
            else
                __result__ = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(name_);
            return __result__;
        }

        /// <summary>
        /// <p>Set the state contained in a pass to the device.</p>
        /// </summary>
        /// <param name = "flags"><dd>  <p>Unused.</p> </dd></param>
        /// <param name = "contextRef"><dd>  <p>The <strong><see cref = "SharpDX.Direct3D11.DeviceContext"/></strong> to apply the pass to.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476707</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectPass::Apply([In] unsigned int Flags,[In] ID3D11DeviceContext* pContext)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectPass::Apply</unmanaged-short>
        internal unsafe void Apply(System.Int32 flags, SharpDX.Direct3D11.DeviceContext contextRef)
        {
            System.IntPtr contextRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            contextRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.Direct3D11.DeviceContext>(contextRef);
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, flags, (void *)contextRef_, (*(void ***)this._nativePointer)[13]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Generate a mask for allowing/preventing state changes.</p>
        /// </summary>
        /// <param name = "stateBlockMaskRef"><dd>  <p>A reference to a state-block mask (see <strong><see cref = "SharpDX.Direct3D11.StateBlockMask"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476708</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectPass::ComputeStateBlockMask([InOut] D3DX11_STATE_BLOCK_MASK* pStateBlockMask)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectPass::ComputeStateBlockMask</unmanaged-short>
        public unsafe void ComputeStateBlockMask(ref SharpDX.Direct3D11.StateBlockMask stateBlockMaskRef)
        {
            SharpDX.Direct3D11.StateBlockMask.__Native stateBlockMaskRef_ = default (SharpDX.Direct3D11.StateBlockMask.__Native);
            SharpDX.Result __result__;
            stateBlockMaskRef.__MarshalTo(ref stateBlockMaskRef_);
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, &stateBlockMaskRef_, (*(void ***)this._nativePointer)[14]);
            stateBlockMaskRef.__MarshalFrom(ref stateBlockMaskRef_);
            stateBlockMaskRef.__MarshalFree(ref stateBlockMaskRef_);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("53a262f6-5f74-4151-a132-e3dd19a62c9d")]
    public partial class EffectRasterizerVariable : SharpDX.Direct3D11.EffectVariable
    {
        public EffectRasterizerVariable(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectRasterizerVariable(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectRasterizerVariable(nativePtr);
        /// <summary>
        /// <p>Get a reference to a rasterizer interface.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Index into an array of rasterizer interfaces. If there is only one rasterizer interface, use 0.</p> </dd></param>
        /// <param name = "stateOut"><dd>  <p>The address of a reference to a rasterizer interface (see <strong><see cref = "SharpDX.Direct3D11.RasterizerState"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476721</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectRasterizerVariable::GetRasterizerState([In] unsigned int Index,[Out] ID3D11RasterizerState** ppState)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectRasterizerVariable::GetRasterizerState</unmanaged-short>
        public unsafe void GetRasterizerState(System.Int32 index, out SharpDX.Direct3D11.RasterizerState stateOut)
        {
            System.IntPtr stateOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, index, &stateOut_, (*(void ***)this._nativePointer)[31]);
            if (stateOut_ != System.IntPtr.Zero)
                stateOut = new SharpDX.Direct3D11.RasterizerState(stateOut_);
            else
                stateOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets the rasterizer state.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Index into an array of rasterizer interfaces. If there is only one rasterizer interface, use 0. </p> </dd></param>
        /// <param name = "stateRef"><dd>  <p>Pointer to an <strong><see cref = "SharpDX.Direct3D11.RasterizerState"/></strong> interface.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476722</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectRasterizerVariable::SetRasterizerState([In] unsigned int Index,[In] ID3D11RasterizerState* pState)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectRasterizerVariable::SetRasterizerState</unmanaged-short>
        public unsafe void SetRasterizerState(System.Int32 index, SharpDX.Direct3D11.RasterizerState stateRef)
        {
            System.IntPtr stateRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            stateRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.Direct3D11.RasterizerState>(stateRef);
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, index, (void *)stateRef_, (*(void ***)this._nativePointer)[32]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Reverts a previously set rasterizer state.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Index into an array of rasterizer interfaces. If there is only one rasterizer interface, use 0. </p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476723</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectRasterizerVariable::UndoSetRasterizerState([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectRasterizerVariable::UndoSetRasterizerState</unmanaged-short>
        public unsafe void UndoSetRasterizerState(System.Int32 index)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, index, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a reference to a variable that contains rasteriser state.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Index into an array of rasteriser-state descriptions. If there is only one rasteriser variable in the effect, use 0.</p> </dd></param>
        /// <param name = "descRef"><dd>  <p>A reference to a rasteriser-state description (see <strong><see cref = "SharpDX.Direct3D11.RasterizerStateDescription"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>Effect variables are saved in memory in the backing store; when a technique is applied, the values in the backing store are copied to the device.  Backing store data can used to recreate the variable when necessary.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476720</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectRasterizerVariable::GetBackingStore([In] unsigned int Index,[Out] D3D11_RASTERIZER_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectRasterizerVariable::GetBackingStore</unmanaged-short>
        public unsafe void GetBackingStore(System.Int32 index, out SharpDX.Direct3D11.RasterizerStateDescription descRef)
        {
            descRef = default (SharpDX.Direct3D11.RasterizerStateDescription);
            SharpDX.Result __result__;
            fixed (void *descRef_ = &descRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, index, descRef_, (*(void ***)this._nativePointer)[34]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("d5066909-f40c-43f8-9db5-057c2a208552")]
    public partial class EffectRenderTargetViewVariable : SharpDX.Direct3D11.EffectVariable
    {
        public EffectRenderTargetViewVariable(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectRenderTargetViewVariable(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectRenderTargetViewVariable(nativePtr);
        /// <summary>
        /// <p>Set a render-target.</p>
        /// </summary>
        /// <param name = "resourceRef"><dd>  <p>A reference to a render-target-view interface. See <strong><see cref = "SharpDX.Direct3D11.RenderTargetView"/></strong>.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476727</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectRenderTargetViewVariable::SetRenderTarget([In] ID3D11RenderTargetView* pResource)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectRenderTargetViewVariable::SetRenderTarget</unmanaged-short>
        public unsafe void SetRenderTarget(SharpDX.Direct3D11.RenderTargetView resourceRef)
        {
            System.IntPtr resourceRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resourceRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.Direct3D11.RenderTargetView>(resourceRef);
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resourceRef_, (*(void ***)this._nativePointer)[31]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a render-target.</p>
        /// </summary>
        /// <returns><dd>  <p>The address of a reference to a render-target-view interface. See <strong><see cref = "SharpDX.Direct3D11.RenderTargetView"/></strong>.</p> </dd></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476725</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectRenderTargetViewVariable::GetRenderTarget([Out] ID3D11RenderTargetView** ppResource)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectRenderTargetViewVariable::GetRenderTarget</unmanaged-short>
        public unsafe SharpDX.Direct3D11.RenderTargetView GetRenderTarget()
        {
            SharpDX.Direct3D11.RenderTargetView resourceOut;
            System.IntPtr resourceOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, &resourceOut_, (*(void ***)this._nativePointer)[32]);
            if (resourceOut_ != System.IntPtr.Zero)
                resourceOut = new SharpDX.Direct3D11.RenderTargetView(resourceOut_);
            else
                resourceOut = null;
            __result__.CheckError();
            return resourceOut;
        }

        /// <summary>
        /// <p>Set an array of render-targets.</p>
        /// </summary>
        /// <param name = "resourcesOut"><dd>  <p>Set an array of render-target-view interfaces. See <strong><see cref = "SharpDX.Direct3D11.RenderTargetView"/></strong>.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>The zero-based array index to store the first interface.</p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476728</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectRenderTargetViewVariable::SetRenderTargetArray([In, Buffer] ID3D11RenderTargetView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectRenderTargetViewVariable::SetRenderTargetArray</unmanaged-short>
        internal unsafe void SetRenderTargetArray(SharpDX.Direct3D11.RenderTargetView[] resourcesOut, System.Int32 offset, System.Int32 count)
        {
            System.IntPtr*resourcesOut_;
            resourcesOut_ = (System.IntPtr*)0;
            if (resourcesOut != null)
            {
                System.IntPtr*_resourcesOut = stackalloc System.IntPtr[resourcesOut.Length];
                resourcesOut_ = _resourcesOut;
            }

            SharpDX.Result __result__;
            if (resourcesOut != null)
                for (int i = 0; i < resourcesOut.Length; ++i)
                    (resourcesOut_)[i] = SharpDX.CppObject.ToCallbackPtr<SharpDX.Direct3D11.RenderTargetView>(resourcesOut[i]);
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resourcesOut_, offset, count, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get an array of render-targets.</p>
        /// </summary>
        /// <param name = "resourcesOut"><dd>  <p>A reference to an array of render-target-view interfaces. See <strong><see cref = "SharpDX.Direct3D11.RenderTargetView"/></strong>.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>The zero-based array index to get the first interface.</p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476726</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectRenderTargetViewVariable::GetRenderTargetArray([Out, Buffer] ID3D11RenderTargetView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectRenderTargetViewVariable::GetRenderTargetArray</unmanaged-short>
        internal unsafe void GetRenderTargetArray(SharpDX.Direct3D11.RenderTargetView[] resourcesOut, System.Int32 offset, System.Int32 count)
        {
            System.IntPtr*resourcesOut_;
            resourcesOut_ = (System.IntPtr*)0;
            {
                System.IntPtr*_resourcesOut = stackalloc System.IntPtr[resourcesOut.Length];
                resourcesOut_ = _resourcesOut;
            }

            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resourcesOut_, offset, count, (*(void ***)this._nativePointer)[34]);
            for (int i = 0; i < resourcesOut.Length; ++i)
                if ((resourcesOut_)[i] != System.IntPtr.Zero)
                    resourcesOut[i] = new SharpDX.Direct3D11.RenderTargetView((resourcesOut_)[i]);
                else
                    resourcesOut[i] = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Set an array of render-targets.</p>
        /// </summary>
        /// <param name = "resourcesOut"><dd>  <p>Set an array of render-target-view interfaces. See <strong><see cref = "SharpDX.Direct3D11.RenderTargetView"/></strong>.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>The zero-based array index to store the first interface.</p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476728</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectRenderTargetViewVariable::SetRenderTargetArray([In, Buffer] ID3D11RenderTargetView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectRenderTargetViewVariable::SetRenderTargetArray</unmanaged-short>
        internal unsafe void SetRenderTargetArray(SharpDX.ComArray<SharpDX.Direct3D11.RenderTargetView> resourcesOut, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)(resourcesOut?.NativePointer ?? System.IntPtr.Zero), offset, count, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Set an array of render-targets.</p>
        /// </summary>
        /// <param name = "resourcesOut"><dd>  <p>Set an array of render-target-view interfaces. See <strong><see cref = "SharpDX.Direct3D11.RenderTargetView"/></strong>.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>The zero-based array index to store the first interface.</p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476728</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectRenderTargetViewVariable::SetRenderTargetArray([In, Buffer] ID3D11RenderTargetView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectRenderTargetViewVariable::SetRenderTargetArray</unmanaged-short>
        private unsafe void SetRenderTargetArray(System.IntPtr resourcesOut, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resourcesOut, offset, count, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("c6402e55-1095-4d95-8931-f92660513dd9")]
    public partial class EffectSamplerVariable : SharpDX.Direct3D11.EffectVariable
    {
        public EffectSamplerVariable(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectSamplerVariable(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectSamplerVariable(nativePtr);
        /// <summary>
        /// <p>Get a reference to a sampler interface.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Index into an array of sampler interfaces. If there is only one sampler interface, use 0.</p> </dd></param>
        /// <returns><dd>  <p>The address of a reference to a sampler interface (see <strong><see cref = "SharpDX.Direct3D11.SamplerState"/></strong>).</p> </dd></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476731</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectSamplerVariable::GetSampler([In] unsigned int Index,[Out] ID3D11SamplerState** ppSampler)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectSamplerVariable::GetSampler</unmanaged-short>
        public unsafe SharpDX.Direct3D11.SamplerState GetSampler(System.Int32 index)
        {
            SharpDX.Direct3D11.SamplerState samplerOut;
            System.IntPtr samplerOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, index, &samplerOut_, (*(void ***)this._nativePointer)[31]);
            if (samplerOut_ != System.IntPtr.Zero)
                samplerOut = new SharpDX.Direct3D11.SamplerState(samplerOut_);
            else
                samplerOut = null;
            __result__.CheckError();
            return samplerOut;
        }

        /// <summary>
        /// <p>Set sampler state.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Index into an array of sampler interfaces. If there is only one sampler interface, use 0. </p> </dd></param>
        /// <param name = "samplerRef"><dd>  <p>Pointer to an <strong><see cref = "SharpDX.Direct3D11.SamplerState"/></strong> interface containing the sampler state.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476732</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectSamplerVariable::SetSampler([In] unsigned int Index,[In] ID3D11SamplerState* pSampler)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectSamplerVariable::SetSampler</unmanaged-short>
        public unsafe void SetSampler(System.Int32 index, SharpDX.Direct3D11.SamplerState samplerRef)
        {
            System.IntPtr samplerRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            samplerRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.Direct3D11.SamplerState>(samplerRef);
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, index, (void *)samplerRef_, (*(void ***)this._nativePointer)[32]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Revert a previously set sampler state.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Index into an array of sampler interfaces. If there is only one sampler interface, use 0. </p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476733</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectSamplerVariable::UndoSetSampler([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectSamplerVariable::UndoSetSampler</unmanaged-short>
        public unsafe void UndoSetSampler(System.Int32 index)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, index, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a reference to a variable that contains sampler state.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Index into an array of sampler descriptions. If there is only one sampler variable in the effect, use 0.</p> </dd></param>
        /// <param name = "descRef"><dd>  <p>A reference to a sampler description (see <strong><see cref = "SharpDX.Direct3D11.SamplerStateDescription"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476730</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectSamplerVariable::GetBackingStore([In] unsigned int Index,[Out] D3D11_SAMPLER_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectSamplerVariable::GetBackingStore</unmanaged-short>
        public unsafe void GetBackingStore(System.Int32 index, out SharpDX.Direct3D11.SamplerStateDescription descRef)
        {
            descRef = default (SharpDX.Direct3D11.SamplerStateDescription);
            SharpDX.Result __result__;
            fixed (void *descRef_ = &descRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, index, descRef_, (*(void ***)this._nativePointer)[34]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("921ef2e5-a65d-4e92-9fc6-4e9cc09a4ade")]
    public partial class EffectScalarVariable : SharpDX.Direct3D11.EffectVariable
    {
        public EffectScalarVariable(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectScalarVariable(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectScalarVariable(nativePtr);
        /// <summary>
        /// <p>Set a floating-point variable.</p>
        /// </summary>
        /// <param name = "value"><dd>  <p>A reference to the variable.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476743</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectScalarVariable::SetFloat([In] const float Value)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectScalarVariable::SetFloat</unmanaged-short>
        internal unsafe void SetFloat(System.Single value)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, value, (*(void ***)this._nativePointer)[31]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a floating-point variable.</p>
        /// </summary>
        /// <returns><dd>  <p>A reference to the variable.</p> </dd></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476737</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectScalarVariable::GetFloat([Out] float* pValue)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectScalarVariable::GetFloat</unmanaged-short>
        public unsafe System.Single GetFloat()
        {
            System.Single valueRef;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, &valueRef, (*(void ***)this._nativePointer)[32]);
            __result__.CheckError();
            return valueRef;
        }

        /// <summary>
        /// <p>Set an array of floating-point variables.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476744</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectScalarVariable::SetFloatArray([In, Buffer] const float* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectScalarVariable::SetFloatArray</unmanaged-short>
        internal unsafe void SetFloatArray(System.Single[] dataRef, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            fixed (void *dataRef_ = dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, offset, count, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get an array of floating-point variables.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476738</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectScalarVariable::GetFloatArray([Out, Buffer] float* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectScalarVariable::GetFloatArray</unmanaged-short>
        internal unsafe void GetFloatArray(System.Single[] dataRef, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            fixed (void *dataRef_ = dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, offset, count, (*(void ***)this._nativePointer)[34]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Set an integer variable.</p>
        /// </summary>
        /// <param name = "value"><dd>  <p>A reference to the variable.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476745</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectScalarVariable::SetInt([In] const int Value)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectScalarVariable::SetInt</unmanaged-short>
        internal unsafe void SetInt(System.Int32 value)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, value, (*(void ***)this._nativePointer)[35]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get an integer variable.</p>
        /// </summary>
        /// <returns><dd>  <p>A reference to the variable.</p> </dd></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476739</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectScalarVariable::GetInt([Out] int* pValue)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectScalarVariable::GetInt</unmanaged-short>
        public unsafe System.Int32 GetInt()
        {
            System.Int32 valueRef;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, &valueRef, (*(void ***)this._nativePointer)[36]);
            __result__.CheckError();
            return valueRef;
        }

        /// <summary>
        /// <p>Set an array of integer variables.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476746</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectScalarVariable::SetIntArray([In, Buffer] const int* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectScalarVariable::SetIntArray</unmanaged-short>
        internal unsafe void SetIntArray(System.Int32[] dataRef, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            fixed (void *dataRef_ = dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, offset, count, (*(void ***)this._nativePointer)[37]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get an array of integer variables.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476740</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectScalarVariable::GetIntArray([Out, Buffer] int* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectScalarVariable::GetIntArray</unmanaged-short>
        internal unsafe void GetIntArray(System.Int32[] dataRef, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            fixed (void *dataRef_ = dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, offset, count, (*(void ***)this._nativePointer)[38]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Set a boolean variable.</p>
        /// </summary>
        /// <param name = "value"><dd>  <p>A reference to the variable.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476741</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectScalarVariable::SetBool([In] const BOOL Value)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectScalarVariable::SetBool</unmanaged-short>
        internal unsafe void SetBool(SharpDX.Mathematics.Interop.RawBool value)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint0(this._nativePointer, value, (*(void ***)this._nativePointer)[39]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a boolean variable.</p>
        /// </summary>
        /// <param name = "valueRef"><dd>  <p>A reference to the variable.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476735</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectScalarVariable::GetBool([Out] BOOL* pValue)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectScalarVariable::GetBool</unmanaged-short>
        internal unsafe void GetBool(out SharpDX.Mathematics.Interop.RawBool valueRef)
        {
            valueRef = default (SharpDX.Mathematics.Interop.RawBool);
            SharpDX.Result __result__;
            fixed (void *valueRef_ = &valueRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, valueRef_, (*(void ***)this._nativePointer)[40]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Set an array of boolean variables.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476742</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectScalarVariable::SetBoolArray([In, Buffer] const BOOL* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectScalarVariable::SetBoolArray</unmanaged-short>
        internal unsafe void SetBoolArray(SharpDX.Mathematics.Interop.RawBool[] dataRef, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            fixed (void *dataRef_ = dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, offset, count, (*(void ***)this._nativePointer)[41]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get an array of boolean variables.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476736</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectScalarVariable::GetBoolArray([Out, Buffer] BOOL* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectScalarVariable::GetBoolArray</unmanaged-short>
        internal unsafe void GetBoolArray(SharpDX.Mathematics.Interop.RawBool[] dataRef, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            fixed (void *dataRef_ = dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, offset, count, (*(void ***)this._nativePointer)[42]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("350db233-bbe0-485c-9bfe-c0026b844f89")]
    public partial class EffectShaderResourceVariable : SharpDX.Direct3D11.EffectVariable
    {
        public EffectShaderResourceVariable(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectShaderResourceVariable(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectShaderResourceVariable(nativePtr);
        /// <summary>
        /// <p>Set a shader resource.</p>
        /// </summary>
        /// <param name = "resourceRef"><dd>  <p>The address of a reference to a shader-resource-view interface. See <strong><see cref = "SharpDX.Direct3D11.ShaderResourceView"/></strong>.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476750</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectShaderResourceVariable::SetResource([In] ID3D11ShaderResourceView* pResource)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectShaderResourceVariable::SetResource</unmanaged-short>
        public unsafe void SetResource(SharpDX.Direct3D11.ShaderResourceView resourceRef)
        {
            System.IntPtr resourceRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resourceRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.Direct3D11.ShaderResourceView>(resourceRef);
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resourceRef_, (*(void ***)this._nativePointer)[31]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a shader resource.</p>
        /// </summary>
        /// <returns><dd>  <p>The address of a reference to a shader-resource-view interface. See <strong><see cref = "SharpDX.Direct3D11.ShaderResourceView"/></strong>.</p> </dd></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476748</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectShaderResourceVariable::GetResource([Out] ID3D11ShaderResourceView** ppResource)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectShaderResourceVariable::GetResource</unmanaged-short>
        public unsafe SharpDX.Direct3D11.ShaderResourceView GetResource()
        {
            SharpDX.Direct3D11.ShaderResourceView resourceOut;
            System.IntPtr resourceOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, &resourceOut_, (*(void ***)this._nativePointer)[32]);
            if (resourceOut_ != System.IntPtr.Zero)
                resourceOut = new SharpDX.Direct3D11.ShaderResourceView(resourceOut_);
            else
                resourceOut = null;
            __result__.CheckError();
            return resourceOut;
        }

        /// <summary>
        /// <p>Set an array of shader resources.</p>
        /// </summary>
        /// <param name = "resourcesOut"><dd>  <p>The address of an array of shader-resource-view interfaces. See <strong><see cref = "SharpDX.Direct3D11.ShaderResourceView"/></strong>.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>The zero-based array index to get the first interface.</p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476751</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectShaderResourceVariable::SetResourceArray([In, Buffer] ID3D11ShaderResourceView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectShaderResourceVariable::SetResourceArray</unmanaged-short>
        internal unsafe void SetResourceArray(SharpDX.Direct3D11.ShaderResourceView[] resourcesOut, System.Int32 offset, System.Int32 count)
        {
            System.IntPtr*resourcesOut_;
            resourcesOut_ = (System.IntPtr*)0;
            if (resourcesOut != null)
            {
                System.IntPtr*_resourcesOut = stackalloc System.IntPtr[resourcesOut.Length];
                resourcesOut_ = _resourcesOut;
            }

            SharpDX.Result __result__;
            if (resourcesOut != null)
                for (int i = 0; i < resourcesOut.Length; ++i)
                    (resourcesOut_)[i] = SharpDX.CppObject.ToCallbackPtr<SharpDX.Direct3D11.ShaderResourceView>(resourcesOut[i]);
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resourcesOut_, offset, count, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get an array of shader resources.</p>
        /// </summary>
        /// <param name = "resourcesOut"><dd>  <p>The address of an array of shader-resource-view interfaces. See <strong><see cref = "SharpDX.Direct3D11.ShaderResourceView"/></strong>.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>The zero-based array index to get the first interface.</p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476749</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectShaderResourceVariable::GetResourceArray([Out, Buffer] ID3D11ShaderResourceView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectShaderResourceVariable::GetResourceArray</unmanaged-short>
        internal unsafe void GetResourceArray(SharpDX.Direct3D11.ShaderResourceView[] resourcesOut, System.Int32 offset, System.Int32 count)
        {
            System.IntPtr*resourcesOut_;
            resourcesOut_ = (System.IntPtr*)0;
            {
                System.IntPtr*_resourcesOut = stackalloc System.IntPtr[resourcesOut.Length];
                resourcesOut_ = _resourcesOut;
            }

            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resourcesOut_, offset, count, (*(void ***)this._nativePointer)[34]);
            for (int i = 0; i < resourcesOut.Length; ++i)
                if ((resourcesOut_)[i] != System.IntPtr.Zero)
                    resourcesOut[i] = new SharpDX.Direct3D11.ShaderResourceView((resourcesOut_)[i]);
                else
                    resourcesOut[i] = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Set an array of shader resources.</p>
        /// </summary>
        /// <param name = "resourcesOut"><dd>  <p>The address of an array of shader-resource-view interfaces. See <strong><see cref = "SharpDX.Direct3D11.ShaderResourceView"/></strong>.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>The zero-based array index to get the first interface.</p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476751</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectShaderResourceVariable::SetResourceArray([In, Buffer] ID3D11ShaderResourceView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectShaderResourceVariable::SetResourceArray</unmanaged-short>
        internal unsafe void SetResourceArray(SharpDX.ComArray<SharpDX.Direct3D11.ShaderResourceView> resourcesOut, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)(resourcesOut?.NativePointer ?? System.IntPtr.Zero), offset, count, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Set an array of shader resources.</p>
        /// </summary>
        /// <param name = "resourcesOut"><dd>  <p>The address of an array of shader-resource-view interfaces. See <strong><see cref = "SharpDX.Direct3D11.ShaderResourceView"/></strong>.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>The zero-based array index to get the first interface.</p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476751</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectShaderResourceVariable::SetResourceArray([In, Buffer] ID3D11ShaderResourceView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectShaderResourceVariable::SetResourceArray</unmanaged-short>
        private unsafe void SetResourceArray(System.IntPtr resourcesOut, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resourcesOut, offset, count, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("7508b344-020a-4ec7-9118-62cdd36c88d7")]
    public partial class EffectShaderVariable : SharpDX.Direct3D11.EffectVariable
    {
        public EffectShaderVariable(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectShaderVariable(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectShaderVariable(nativePtr);
        /// <summary>
        /// <p>Get a shader description.</p>
        /// </summary>
        /// <param name = "shaderIndex"><dd>  <p>A zero-based index.</p> </dd></param>
        /// <returns><dd>  <p>A reference to a shader description (see <strong><see cref = "SharpDX.Direct3D11.EffectShaderDescription"/></strong>).</p> </dd></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476761</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetShaderDesc([In] unsigned int ShaderIndex,[Out] D3DX11_EFFECT_SHADER_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectShaderVariable::GetShaderDesc</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectShaderDescription GetShaderDescription(System.Int32 shaderIndex)
        {
            SharpDX.Direct3D11.EffectShaderDescription descRef;
            SharpDX.Direct3D11.EffectShaderDescription.__Native descRef_ = default (SharpDX.Direct3D11.EffectShaderDescription.__Native);
            descRef = default (SharpDX.Direct3D11.EffectShaderDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, shaderIndex, &descRef_, (*(void ***)this._nativePointer)[31]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
            return descRef;
        }

        /// <summary>
        /// <p>Get a vertex shader.</p>
        /// </summary>
        /// <param name = "shaderIndex"><dd>  <p>A zero-based index.</p> </dd></param>
        /// <returns><dd>  <p>A reference to an <strong><see cref = "SharpDX.Direct3D11.VertexShader"/></strong> reference that will be set to the vertex shader on return.</p> </dd></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476762</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetVertexShader([In] unsigned int ShaderIndex,[Out] ID3D11VertexShader** ppVS)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectShaderVariable::GetVertexShader</unmanaged-short>
        public unsafe SharpDX.Direct3D11.VertexShader GetVertexShader(System.Int32 shaderIndex)
        {
            SharpDX.Direct3D11.VertexShader vSOut;
            System.IntPtr vSOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, shaderIndex, &vSOut_, (*(void ***)this._nativePointer)[32]);
            if (vSOut_ != System.IntPtr.Zero)
                vSOut = new SharpDX.Direct3D11.VertexShader(vSOut_);
            else
                vSOut = null;
            __result__.CheckError();
            return vSOut;
        }

        /// <summary>
        /// <p>Get a geometry shader.</p>
        /// </summary>
        /// <param name = "shaderIndex"><dd>  <p>A zero-based index.</p> </dd></param>
        /// <returns><dd>  <p>A reference to an <strong><see cref = "SharpDX.Direct3D11.GeometryShader"/></strong> reference that will be set to the geometry shader on return.</p> </dd></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476755</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetGeometryShader([In] unsigned int ShaderIndex,[Out] ID3D11GeometryShader** ppGS)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectShaderVariable::GetGeometryShader</unmanaged-short>
        public unsafe SharpDX.Direct3D11.GeometryShader GetGeometryShader(System.Int32 shaderIndex)
        {
            SharpDX.Direct3D11.GeometryShader gSOut;
            System.IntPtr gSOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, shaderIndex, &gSOut_, (*(void ***)this._nativePointer)[33]);
            if (gSOut_ != System.IntPtr.Zero)
                gSOut = new SharpDX.Direct3D11.GeometryShader(gSOut_);
            else
                gSOut = null;
            __result__.CheckError();
            return gSOut;
        }

        /// <summary>
        /// <p>Get a pixel shader.</p>
        /// </summary>
        /// <param name = "shaderIndex"><dd>  <p>A zero-based index.</p> </dd></param>
        /// <returns><dd>  <p>A reference to an <strong><see cref = "SharpDX.Direct3D11.PixelShader"/></strong> reference that will be set to the pixel shader on return.</p> </dd></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476760</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetPixelShader([In] unsigned int ShaderIndex,[Out] ID3D11PixelShader** ppPS)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectShaderVariable::GetPixelShader</unmanaged-short>
        public unsafe SharpDX.Direct3D11.PixelShader GetPixelShader(System.Int32 shaderIndex)
        {
            SharpDX.Direct3D11.PixelShader pSOut;
            System.IntPtr pSOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, shaderIndex, &pSOut_, (*(void ***)this._nativePointer)[34]);
            if (pSOut_ != System.IntPtr.Zero)
                pSOut = new SharpDX.Direct3D11.PixelShader(pSOut_);
            else
                pSOut = null;
            __result__.CheckError();
            return pSOut;
        }

        /// <summary>
        /// <p>Get a hull shader.</p>
        /// </summary>
        /// <param name = "shaderIndex"><dd>  <p>Index of the shader.</p> </dd></param>
        /// <param name = "hSOut"><dd>  <p>A reference to an <strong><see cref = "SharpDX.Direct3D11.HullShader"/></strong> reference that will be set to the hull shader on return.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476756</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetHullShader([In] unsigned int ShaderIndex,[Out] ID3D11HullShader** ppHS)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectShaderVariable::GetHullShader</unmanaged-short>
        public unsafe void GetHullShader(System.Int32 shaderIndex, out SharpDX.Direct3D11.HullShader hSOut)
        {
            System.IntPtr hSOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, shaderIndex, &hSOut_, (*(void ***)this._nativePointer)[35]);
            if (hSOut_ != System.IntPtr.Zero)
                hSOut = new SharpDX.Direct3D11.HullShader(hSOut_);
            else
                hSOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a domain shader.</p>
        /// </summary>
        /// <param name = "shaderIndex"><dd>  <p>Index of the domain shader.</p> </dd></param>
        /// <param name = "dSOut"><dd>  <p>Pointer to an <strong><see cref = "SharpDX.Direct3D11.DomainShader"/></strong> reference that will be set to the domain shader on return.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476754</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetDomainShader([In] unsigned int ShaderIndex,[Out] ID3D11DomainShader** ppDS)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectShaderVariable::GetDomainShader</unmanaged-short>
        public unsafe void GetDomainShader(System.Int32 shaderIndex, out SharpDX.Direct3D11.DomainShader dSOut)
        {
            System.IntPtr dSOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, shaderIndex, &dSOut_, (*(void ***)this._nativePointer)[36]);
            if (dSOut_ != System.IntPtr.Zero)
                dSOut = new SharpDX.Direct3D11.DomainShader(dSOut_);
            else
                dSOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a compute shader.</p>
        /// </summary>
        /// <param name = "shaderIndex"><dd>  <p>Index of the compute shader.</p> </dd></param>
        /// <param name = "cSOut"><dd>  <p>Pointer to an <strong><see cref = "SharpDX.Direct3D11.ComputeShader"/></strong> reference that will be set to the compute shader on return.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476753</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetComputeShader([In] unsigned int ShaderIndex,[Out] ID3D11ComputeShader** ppCS)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectShaderVariable::GetComputeShader</unmanaged-short>
        public unsafe void GetComputeShader(System.Int32 shaderIndex, out SharpDX.Direct3D11.ComputeShader cSOut)
        {
            System.IntPtr cSOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, shaderIndex, &cSOut_, (*(void ***)this._nativePointer)[37]);
            if (cSOut_ != System.IntPtr.Zero)
                cSOut = new SharpDX.Direct3D11.ComputeShader(cSOut_);
            else
                cSOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get an input-signature description.</p>
        /// </summary>
        /// <param name = "shaderIndex"><dd>  <p>A zero-based shader index.</p> </dd></param>
        /// <param name = "element"><dd>  <p>A zero-based shader-element index.</p> </dd></param>
        /// <returns><dd>  <p>A reference to a parameter description (see <strong><see cref = "SharpDX.D3DCompiler.ShaderParameterDescription"/></strong>).</p> </dd></returns>
        /// <remarks>
        /// <p>An effect contains one or more shaders; each shader has an input and output signature; each signature contains one or more elements (or parameters).  The shader index identifies the shader and the element index identifies the element (or parameter) in the shader signature.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476757</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetInputSignatureElementDesc([In] unsigned int ShaderIndex,[In] unsigned int Element,[Out] D3D11_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectShaderVariable::GetInputSignatureElementDesc</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.ShaderParameterDescription GetInputSignatureElementDescription(System.Int32 shaderIndex, System.Int32 element)
        {
            SharpDX.D3DCompiler.ShaderParameterDescription etInputParameterDescriptionRef;
            SharpDX.D3DCompiler.ShaderParameterDescription.__Native etInputParameterDescriptionRef_ = default (SharpDX.D3DCompiler.ShaderParameterDescription.__Native);
            etInputParameterDescriptionRef = default (SharpDX.D3DCompiler.ShaderParameterDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, shaderIndex, element, &etInputParameterDescriptionRef_, (*(void ***)this._nativePointer)[38]);
            etInputParameterDescriptionRef.__MarshalFrom(ref etInputParameterDescriptionRef_);
            __result__.CheckError();
            return etInputParameterDescriptionRef;
        }

        /// <summary>
        /// <p>Get an output-signature description.</p>
        /// </summary>
        /// <param name = "shaderIndex"><dd>  <p>A zero-based shader index.</p> </dd></param>
        /// <param name = "element"><dd>  <p>A zero-based element index.</p> </dd></param>
        /// <returns><dd>  <p>A reference to a parameter description (see <strong><see cref = "SharpDX.D3DCompiler.ShaderParameterDescription"/></strong>).</p> </dd></returns>
        /// <remarks>
        /// <p>An effect contains one or more shaders; each shader has an input and output signature; each signature contains one or more elements (or parameters).  The shader index identifies the shader and the element index identifies the element (or parameter) in the shader signature.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476758</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetOutputSignatureElementDesc([In] unsigned int ShaderIndex,[In] unsigned int Element,[Out] D3D11_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectShaderVariable::GetOutputSignatureElementDesc</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.ShaderParameterDescription GetOutputSignatureElementDescription(System.Int32 shaderIndex, System.Int32 element)
        {
            SharpDX.D3DCompiler.ShaderParameterDescription etOutputParameterDescriptionRef;
            SharpDX.D3DCompiler.ShaderParameterDescription.__Native etOutputParameterDescriptionRef_ = default (SharpDX.D3DCompiler.ShaderParameterDescription.__Native);
            etOutputParameterDescriptionRef = default (SharpDX.D3DCompiler.ShaderParameterDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, shaderIndex, element, &etOutputParameterDescriptionRef_, (*(void ***)this._nativePointer)[39]);
            etOutputParameterDescriptionRef.__MarshalFrom(ref etOutputParameterDescriptionRef_);
            __result__.CheckError();
            return etOutputParameterDescriptionRef;
        }

        /// <summary>
        /// <p>Get a patch constant signature description.</p>
        /// </summary>
        /// <param name = "shaderIndex"><dd>  <p>A zero-based shader index. </p> </dd></param>
        /// <param name = "element"><dd>  <p>A zero-based element index. </p> </dd></param>
        /// <param name = "descRef"><dd>  <p>A reference to a parameter description (see <strong><see cref = "SharpDX.D3DCompiler.ShaderParameterDescription"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476759</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetPatchConstantSignatureElementDesc([In] unsigned int ShaderIndex,[In] unsigned int Element,[Out] D3D11_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectShaderVariable::GetPatchConstantSignatureElementDesc</unmanaged-short>
        public unsafe void GetPatchConstantSignatureElementDescription(System.Int32 shaderIndex, System.Int32 element, out SharpDX.D3DCompiler.ShaderParameterDescription descRef)
        {
            SharpDX.D3DCompiler.ShaderParameterDescription.__Native descRef_ = default (SharpDX.D3DCompiler.ShaderParameterDescription.__Native);
            descRef = default (SharpDX.D3DCompiler.ShaderParameterDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, shaderIndex, element, &descRef_, (*(void ***)this._nativePointer)[40]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("f355c818-01be-4653-a7cc-60fffeddc76d")]
    public partial class EffectStringVariable : SharpDX.Direct3D11.EffectVariable
    {
        public EffectStringVariable(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectStringVariable(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectStringVariable(nativePtr);
        /// <summary>
        /// <p>Get the string.</p>
        /// </summary>
        /// <param name = "stringOut"><dd>  <p>A reference to the string.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476764</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectStringVariable::GetString([Out] const char** ppString)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectStringVariable::GetString</unmanaged-short>
        internal unsafe void GetString(out System.IntPtr stringOut)
        {
            SharpDX.Result __result__;
            fixed (void *stringOut_ = &stringOut)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, stringOut_, (*(void ***)this._nativePointer)[31]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get an array of strings.</p>
        /// </summary>
        /// <param name = "stringsOut"><dd>  <p>A reference to the first string in the array.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>The offset (in number of strings) between the start of the array and the first string to get.</p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of strings in the returned array.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476765</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectStringVariable::GetStringArray([Out, Buffer] const char** ppStrings,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectStringVariable::GetStringArray</unmanaged-short>
        internal unsafe void GetStringArray(System.IntPtr stringsOut, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)stringsOut, offset, count, (*(void ***)this._nativePointer)[32]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("51198831-1f1d-4f47-bd76-41cb0835b1de")]
    public partial class EffectTechnique : SharpDX.ComObject
    {
        public EffectTechnique(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectTechnique(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectTechnique(nativePtr);
        /// <summary>
        /// <p>Test a technique to see if it contains valid syntax.</p>
        /// </summary>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476773</doc-id>
        /// <unmanaged>IsValid</unmanaged>
        /// <unmanaged-short>IsValid</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsValid
        {
            get => IsValid_();
        }

        /// <summary>
        /// <p>Get a technique description.</p>
        /// </summary>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476770</doc-id>
        /// <unmanaged>GetDesc</unmanaged>
        /// <unmanaged-short>GetDesc</unmanaged-short>
        public SharpDX.Direct3D11.EffectTechniqueDescription Description
        {
            get
            {
                GetDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Test a technique to see if it contains valid syntax.</p>
        /// </summary>
        /// <returns><p><strong>TRUE</strong> if the code syntax is valid; otherwise <strong><see cref = "SharpDX.Result.False"/></strong>.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476773</doc-id>
        /// <unmanaged>BOOL ID3DX11EffectTechnique::IsValid()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectTechnique::IsValid</unmanaged-short>
        internal unsafe SharpDX.Mathematics.Interop.RawBool IsValid_()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// <p>Get a technique description.</p>
        /// </summary>
        /// <param name = "descRef"><dd>  <p>A reference to a technique description (see <strong><see cref = "SharpDX.Direct3D11.EffectTechniqueDescription"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476770</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectTechnique::GetDesc([Out] D3DX11_TECHNIQUE_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectTechnique::GetDesc</unmanaged-short>
        internal unsafe void GetDescription(out SharpDX.Direct3D11.EffectTechniqueDescription descRef)
        {
            SharpDX.Direct3D11.EffectTechniqueDescription.__Native descRef_ = default (SharpDX.Direct3D11.EffectTechniqueDescription.__Native);
            descRef = default (SharpDX.Direct3D11.EffectTechniqueDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, &descRef_, (*(void ***)this._nativePointer)[4]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get an annotation by index.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>The zero-based index of the interface reference.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <p>Use an annotation to attach a piece of metadata to a technique.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476768</doc-id>
        /// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectTechnique::GetAnnotationByIndex([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectTechnique::GetAnnotationByIndex</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectVariable GetAnnotationByIndex(System.Int32 index)
        {
            SharpDX.Direct3D11.EffectVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, index, (*(void ***)this._nativePointer)[5]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get an annotation by name.</p>
        /// </summary>
        /// <param name = "name"><dd>  <p>Name of the annotation.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <p>Use an annotation to attach a piece of metadata to a technique.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476769</doc-id>
        /// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectTechnique::GetAnnotationByName([In] const char* Name)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectTechnique::GetAnnotationByName</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectVariable GetAnnotationByName(System.String name)
        {
            System.IntPtr name_;
            SharpDX.Direct3D11.EffectVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            name_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(name);
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (void *)name_, (*(void ***)this._nativePointer)[6]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectVariable(__result__native);
            else
                __result__ = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(name_);
            return __result__;
        }

        /// <summary>
        /// <p>Get a pass by index.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
        /// <returns><p>A reference to a <strong><see cref = "SharpDX.Direct3D11.EffectPass"/></strong>.</p></returns>
        /// <remarks>
        /// <p>A technique contains one or more passes; get a pass using a name or an index.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476771</doc-id>
        /// <unmanaged>ID3DX11EffectPass* ID3DX11EffectTechnique::GetPassByIndex([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectTechnique::GetPassByIndex</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectPass GetPassByIndex(System.Int32 index)
        {
            SharpDX.Direct3D11.EffectPass __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, index, (*(void ***)this._nativePointer)[7]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectPass(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a pass by name.</p>
        /// </summary>
        /// <param name = "name"><dd>  <p>The name of the pass.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectPass"/></strong>.</p></returns>
        /// <remarks>
        /// <p>A technique contains one or more passes; get a pass using a name or an index.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476772</doc-id>
        /// <unmanaged>ID3DX11EffectPass* ID3DX11EffectTechnique::GetPassByName([In] const char* Name)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectTechnique::GetPassByName</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectPass GetPassByName(System.String name)
        {
            System.IntPtr name_;
            SharpDX.Direct3D11.EffectPass __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            name_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(name);
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (void *)name_, (*(void ***)this._nativePointer)[8]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectPass(__result__native);
            else
                __result__ = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(name_);
            return __result__;
        }

        /// <summary>
        /// <p>Compute a state-block mask to allow/prevent state changes.</p>
        /// </summary>
        /// <param name = "stateBlockMaskRef"><dd>  <p>A reference to a state-block mask (see <strong><see cref = "SharpDX.Direct3D11.StateBlockMask"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476767</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectTechnique::ComputeStateBlockMask([InOut] D3DX11_STATE_BLOCK_MASK* pStateBlockMask)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectTechnique::ComputeStateBlockMask</unmanaged-short>
        public unsafe void ComputeStateBlockMask(ref SharpDX.Direct3D11.StateBlockMask stateBlockMaskRef)
        {
            SharpDX.Direct3D11.StateBlockMask.__Native stateBlockMaskRef_ = default (SharpDX.Direct3D11.StateBlockMask.__Native);
            SharpDX.Result __result__;
            stateBlockMaskRef.__MarshalTo(ref stateBlockMaskRef_);
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, &stateBlockMaskRef_, (*(void ***)this._nativePointer)[9]);
            stateBlockMaskRef.__MarshalFrom(ref stateBlockMaskRef_);
            stateBlockMaskRef.__MarshalFree(ref stateBlockMaskRef_);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("4250d721-d5e5-491f-b62b-587c43186285")]
    public partial class EffectType : SharpDX.ComObject
    {
        public EffectType(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectType(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectType(nativePtr);
        /// <summary>
        /// <p>Tests that the effect type is valid.</p>
        /// </summary>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476782</doc-id>
        /// <unmanaged>IsValid</unmanaged>
        /// <unmanaged-short>IsValid</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsValid
        {
            get => IsValid_();
        }

        /// <summary>
        /// <p>Get an effect-type description.</p>
        /// </summary>
        /// <remarks>
        /// <p>The effect-variable description contains data about the name, annotations, semantic, flags and buffer offset of the effect type.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476775</doc-id>
        /// <unmanaged>GetDesc</unmanaged>
        /// <unmanaged-short>GetDesc</unmanaged-short>
        public SharpDX.Direct3D11.EffectTypeDescription Description
        {
            get
            {
                GetDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Tests that the effect type is valid.</p>
        /// </summary>
        /// <returns><p><strong>TRUE</strong> if it is valid; otherwise <strong><see cref = "SharpDX.Result.False"/></strong>.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476782</doc-id>
        /// <unmanaged>BOOL ID3DX11EffectType::IsValid()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectType::IsValid</unmanaged-short>
        internal unsafe SharpDX.Mathematics.Interop.RawBool IsValid_()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// <p>Get an effect-type description.</p>
        /// </summary>
        /// <param name = "descRef"><dd>  <p>A reference to an effect-type description. See <strong><see cref = "SharpDX.Direct3D11.EffectTypeDescription"/></strong>.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>The effect-variable description contains data about the name, annotations, semantic, flags and buffer offset of the effect type.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476775</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectType::GetDesc([Out] D3DX11_EFFECT_TYPE_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectType::GetDesc</unmanaged-short>
        internal unsafe void GetDescription(out SharpDX.Direct3D11.EffectTypeDescription descRef)
        {
            SharpDX.Direct3D11.EffectTypeDescription.__Native descRef_ = default (SharpDX.Direct3D11.EffectTypeDescription.__Native);
            descRef = default (SharpDX.Direct3D11.EffectTypeDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, &descRef_, (*(void ***)this._nativePointer)[4]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a member type by index.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectType"/></strong>.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476779</doc-id>
        /// <unmanaged>ID3DX11EffectType* ID3DX11EffectType::GetMemberTypeByIndex([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectType::GetMemberTypeByIndex</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectType GetMemberTypeByIndex(System.Int32 index)
        {
            SharpDX.Direct3D11.EffectType __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, index, (*(void ***)this._nativePointer)[5]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectType(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get an member type by name.</p>
        /// </summary>
        /// <param name = "name"><dd>  <p>A member's name.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectType"/></strong>.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476780</doc-id>
        /// <unmanaged>ID3DX11EffectType* ID3DX11EffectType::GetMemberTypeByName([In] const char* Name)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectType::GetMemberTypeByName</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectType GetMemberTypeByName(System.String name)
        {
            System.IntPtr name_;
            SharpDX.Direct3D11.EffectType __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            name_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(name);
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (void *)name_, (*(void ***)this._nativePointer)[6]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectType(__result__native);
            else
                __result__ = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(name_);
            return __result__;
        }

        /// <summary>
        /// <p>Get a member type by semantic.</p>
        /// </summary>
        /// <param name = "semantic"><dd>  <p>A semantic.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectType"/></strong>.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476781</doc-id>
        /// <unmanaged>ID3DX11EffectType* ID3DX11EffectType::GetMemberTypeBySemantic([In] const char* Semantic)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectType::GetMemberTypeBySemantic</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectType GetMemberTypeBySemantic(System.String semantic)
        {
            System.IntPtr semantic_;
            SharpDX.Direct3D11.EffectType __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            semantic_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(semantic);
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (void *)semantic_, (*(void ***)this._nativePointer)[7]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectType(__result__native);
            else
                __result__ = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(semantic_);
            return __result__;
        }

        /// <summary>
        /// <p>Get the name of a member.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
        /// <returns><p>The name of the member.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476776</doc-id>
        /// <unmanaged>const char* ID3DX11EffectType::GetMemberName([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectType::GetMemberName</unmanaged-short>
        public unsafe System.String GetMemberName(System.Int32 index)
        {
            System.String __result__;
            System.IntPtr __result__native;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, index, (*(void ***)this._nativePointer)[8]);
            __result__ = System.Runtime.InteropServices.Marshal.PtrToStringAnsi(__result__native);
            return __result__;
        }

        /// <summary>
        /// <p>Get the semantic attached to a member.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
        /// <returns><p>A string that contains the semantic.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476778</doc-id>
        /// <unmanaged>const char* ID3DX11EffectType::GetMemberSemantic([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectType::GetMemberSemantic</unmanaged-short>
        public unsafe System.String GetMemberSemantic(System.Int32 index)
        {
            System.String __result__;
            System.IntPtr __result__native;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, index, (*(void ***)this._nativePointer)[9]);
            __result__ = System.Runtime.InteropServices.Marshal.PtrToStringAnsi(__result__native);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("79b4ac8c-870a-47d2-b05a-8bd5cc3ee6c9")]
    public partial class EffectUnorderedAccessViewVariable : SharpDX.Direct3D11.EffectVariable
    {
        public EffectUnorderedAccessViewVariable(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectUnorderedAccessViewVariable(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectUnorderedAccessViewVariable(nativePtr);
        /// <summary>
        /// <p>Set an unordered-access-view.</p>
        /// </summary>
        /// <param name = "resourceRef"><dd>  <p>Pointer to an <strong><see cref = "SharpDX.Direct3D11.UnorderedAccessView"/></strong>.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476786</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessView([In] ID3D11UnorderedAccessView* pResource)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessView</unmanaged-short>
        public unsafe void Set(SharpDX.Direct3D11.UnorderedAccessView resourceRef)
        {
            System.IntPtr resourceRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            resourceRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.Direct3D11.UnorderedAccessView>(resourceRef);
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resourceRef_, (*(void ***)this._nativePointer)[31]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get an unordered-access-view.</p>
        /// </summary>
        /// <returns><dd>  <p>Pointer to an <strong><see cref = "SharpDX.Direct3D11.UnorderedAccessView"/></strong> reference that will be set on return.</p> </dd></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476784</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::GetUnorderedAccessView([Out] ID3D11UnorderedAccessView** ppResource)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectUnorderedAccessViewVariable::GetUnorderedAccessView</unmanaged-short>
        public unsafe SharpDX.Direct3D11.UnorderedAccessView GetUnorderedAccessView()
        {
            SharpDX.Direct3D11.UnorderedAccessView resourceOut;
            System.IntPtr resourceOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, &resourceOut_, (*(void ***)this._nativePointer)[32]);
            if (resourceOut_ != System.IntPtr.Zero)
                resourceOut = new SharpDX.Direct3D11.UnorderedAccessView(resourceOut_);
            else
                resourceOut = null;
            __result__.CheckError();
            return resourceOut;
        }

        /// <summary>
        /// <p>Set an array of unordered-access-views.</p>
        /// </summary>
        /// <param name = "resourcesOut"><dd>  <p>An array of <strong><see cref = "SharpDX.Direct3D11.UnorderedAccessView"/></strong> references.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>Index of the first unordered-access-view.</p> </dd></param>
        /// <param name = "count"><dd>  <p>Number of elements in the array.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476787</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray([In, Buffer] ID3D11UnorderedAccessView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray</unmanaged-short>
        internal unsafe void Set(SharpDX.Direct3D11.UnorderedAccessView[] resourcesOut, System.Int32 offset, System.Int32 count)
        {
            System.IntPtr*resourcesOut_;
            resourcesOut_ = (System.IntPtr*)0;
            if (resourcesOut != null)
            {
                System.IntPtr*_resourcesOut = stackalloc System.IntPtr[resourcesOut.Length];
                resourcesOut_ = _resourcesOut;
            }

            SharpDX.Result __result__;
            if (resourcesOut != null)
                for (int i = 0; i < resourcesOut.Length; ++i)
                    (resourcesOut_)[i] = SharpDX.CppObject.ToCallbackPtr<SharpDX.Direct3D11.UnorderedAccessView>(resourcesOut[i]);
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resourcesOut_, offset, count, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get an array of unordered-access-views.</p>
        /// </summary>
        /// <param name = "resourcesOut"><dd>  <p>Pointer to an <strong><see cref = "SharpDX.Direct3D11.UnorderedAccessView"/></strong> reference that will be set to the UAV array on return. </p> </dd></param>
        /// <param name = "offset"><dd>  <p>Index of the first interface.</p> </dd></param>
        /// <param name = "count"><dd>  <p>Number of elements in the array.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476785</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::GetUnorderedAccessViewArray([Out, Buffer] ID3D11UnorderedAccessView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectUnorderedAccessViewVariable::GetUnorderedAccessViewArray</unmanaged-short>
        internal unsafe void GetUnorderedAccessViewArray(SharpDX.Direct3D11.UnorderedAccessView[] resourcesOut, System.Int32 offset, System.Int32 count)
        {
            System.IntPtr*resourcesOut_;
            resourcesOut_ = (System.IntPtr*)0;
            {
                System.IntPtr*_resourcesOut = stackalloc System.IntPtr[resourcesOut.Length];
                resourcesOut_ = _resourcesOut;
            }

            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resourcesOut_, offset, count, (*(void ***)this._nativePointer)[34]);
            for (int i = 0; i < resourcesOut.Length; ++i)
                if ((resourcesOut_)[i] != System.IntPtr.Zero)
                    resourcesOut[i] = new SharpDX.Direct3D11.UnorderedAccessView((resourcesOut_)[i]);
                else
                    resourcesOut[i] = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Set an array of unordered-access-views.</p>
        /// </summary>
        /// <param name = "resourcesOut"><dd>  <p>An array of <strong><see cref = "SharpDX.Direct3D11.UnorderedAccessView"/></strong> references.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>Index of the first unordered-access-view.</p> </dd></param>
        /// <param name = "count"><dd>  <p>Number of elements in the array.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476787</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray([In, Buffer] ID3D11UnorderedAccessView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray</unmanaged-short>
        internal unsafe void Set(SharpDX.ComArray<SharpDX.Direct3D11.UnorderedAccessView> resourcesOut, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)(resourcesOut?.NativePointer ?? System.IntPtr.Zero), offset, count, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Set an array of unordered-access-views.</p>
        /// </summary>
        /// <param name = "resourcesOut"><dd>  <p>An array of <strong><see cref = "SharpDX.Direct3D11.UnorderedAccessView"/></strong> references.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>Index of the first unordered-access-view.</p> </dd></param>
        /// <param name = "count"><dd>  <p>Number of elements in the array.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476787</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray([In, Buffer] ID3D11UnorderedAccessView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray</unmanaged-short>
        private unsafe void Set(System.IntPtr resourcesOut, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)resourcesOut, offset, count, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("036a777d-b56e-4b25-b313-cc3ddab71873")]
    public partial class EffectVariable : SharpDX.ComObject
    {
        public EffectVariable(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectVariable(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectVariable(nativePtr);
        /// <summary>
        /// <p>Compare the data type with the data stored.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method checks that the data type matches the data stored after casting one interface to another (using any of the As methods).</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476815</doc-id>
        /// <unmanaged>IsValid</unmanaged>
        /// <unmanaged-short>IsValid</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsValid
        {
            get => IsValid_();
        }

        /// <summary>
        /// <p>Get type information.</p>
        /// </summary>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476814</doc-id>
        /// <unmanaged>GetType</unmanaged>
        /// <unmanaged-short>GetType</unmanaged-short>
        public SharpDX.Direct3D11.EffectType TypeInfo
        {
            get => GetTypeInfo();
        }

        /// <summary>
        /// <p>Get a description.</p>
        /// </summary>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476807</doc-id>
        /// <unmanaged>GetDesc</unmanaged>
        /// <unmanaged-short>GetDesc</unmanaged-short>
        public SharpDX.Direct3D11.EffectVariableDescription Description
        {
            get
            {
                GetDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Get a constant buffer.</p>
        /// </summary>
        /// <remarks>
        /// <p>Effect variables are read-from or written-to a constant buffer.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476812</doc-id>
        /// <unmanaged>GetParentConstantBuffer</unmanaged>
        /// <unmanaged-short>GetParentConstantBuffer</unmanaged-short>
        public SharpDX.Direct3D11.EffectConstantBuffer ParentConstantBuffer
        {
            get => GetParentConstantBuffer();
        }

        /// <summary>
        /// <p>Compare the data type with the data stored.</p>
        /// </summary>
        /// <returns><p><strong>TRUE</strong> if the syntax is valid; otherwise <strong><see cref = "SharpDX.Result.False"/></strong>.</p></returns>
        /// <remarks>
        /// <p>This method checks that the data type matches the data stored after casting one interface to another (using any of the As methods).</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476815</doc-id>
        /// <unmanaged>BOOL ID3DX11EffectVariable::IsValid()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::IsValid</unmanaged-short>
        internal unsafe SharpDX.Mathematics.Interop.RawBool IsValid_()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// <p>Get type information.</p>
        /// </summary>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectType"/></strong>.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476814</doc-id>
        /// <unmanaged>ID3DX11EffectType* ID3DX11EffectVariable::GetType()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::GetType</unmanaged-short>
        internal unsafe SharpDX.Direct3D11.EffectType GetTypeInfo()
        {
            SharpDX.Direct3D11.EffectType __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectType(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a description.</p>
        /// </summary>
        /// <param name = "descRef"><dd>  <p>A reference to an effect-variable description (see <strong><see cref = "SharpDX.Direct3D11.EffectVariableDescription"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476807</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectVariable::GetDesc([Out] D3DX11_EFFECT_VARIABLE_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::GetDesc</unmanaged-short>
        internal unsafe void GetDescription(out SharpDX.Direct3D11.EffectVariableDescription descRef)
        {
            SharpDX.Direct3D11.EffectVariableDescription.__Native descRef_ = default (SharpDX.Direct3D11.EffectVariableDescription.__Native);
            descRef = default (SharpDX.Direct3D11.EffectVariableDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, &descRef_, (*(void ***)this._nativePointer)[5]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get an annotation by index.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <p>Annonations can be attached to a technique, a pass, or a global variable.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476805</doc-id>
        /// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectVariable::GetAnnotationByIndex([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::GetAnnotationByIndex</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectVariable GetAnnotationByIndex(System.Int32 index)
        {
            SharpDX.Direct3D11.EffectVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, index, (*(void ***)this._nativePointer)[6]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get an annotation by name.</p>
        /// </summary>
        /// <param name = "name"><dd>  <p>The annotation name.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectVariable"/></strong>.  Note that if the annotation is not found the <strong><see cref = "SharpDX.Direct3D11.EffectVariable"/></strong> returned  will be empty. The <strong>ID3DX11EffectVariable::IsValid</strong> method should be called to determine whether the annotation was found.</p></returns>
        /// <remarks>
        /// <p>Annonations can be attached to a technique, a pass, or a global variable.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476806</doc-id>
        /// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectVariable::GetAnnotationByName([In] const char* Name)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::GetAnnotationByName</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectVariable GetAnnotationByName(System.String name)
        {
            System.IntPtr name_;
            SharpDX.Direct3D11.EffectVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            name_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(name);
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (void *)name_, (*(void ***)this._nativePointer)[7]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectVariable(__result__native);
            else
                __result__ = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(name_);
            return __result__;
        }

        /// <summary>
        /// <p>Get a structure member by index.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <p>If the effect variable is an structure, use this method to look up a member by index.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476809</doc-id>
        /// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectVariable::GetMemberByIndex([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::GetMemberByIndex</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectVariable GetMemberByIndex(System.Int32 index)
        {
            SharpDX.Direct3D11.EffectVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, index, (*(void ***)this._nativePointer)[8]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a structure member by name.</p>
        /// </summary>
        /// <param name = "name"><dd>  <p>Member name.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <p>If the effect variable is an structure, use this method to look up a member by name.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476810</doc-id>
        /// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectVariable::GetMemberByName([In] const char* Name)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::GetMemberByName</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectVariable GetMemberByName(System.String name)
        {
            System.IntPtr name_;
            SharpDX.Direct3D11.EffectVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            name_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(name);
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (void *)name_, (*(void ***)this._nativePointer)[9]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectVariable(__result__native);
            else
                __result__ = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(name_);
            return __result__;
        }

        /// <summary>
        /// <p>Get a structure member by semantic.</p>
        /// </summary>
        /// <param name = "semantic"><dd>  <p>The semantic.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <p>If the effect variable is an structure, use this method to look up a member by attached semantic.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476811</doc-id>
        /// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectVariable::GetMemberBySemantic([In] const char* Semantic)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::GetMemberBySemantic</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectVariable GetMemberBySemantic(System.String semantic)
        {
            System.IntPtr semantic_;
            SharpDX.Direct3D11.EffectVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            semantic_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(semantic);
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (void *)semantic_, (*(void ***)this._nativePointer)[10]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectVariable(__result__native);
            else
                __result__ = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(semantic_);
            return __result__;
        }

        /// <summary>
        /// <p>Get an array element.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>A zero-based index; otherwise 0.</p> </dd></param>
        /// <returns><p>A reference to an <strong><see cref = "SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <p>If the effect variable is an array, use this method to return one of the elements.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476808</doc-id>
        /// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectVariable::GetElement([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::GetElement</unmanaged-short>
        public unsafe SharpDX.Direct3D11.EffectVariable GetElement(System.Int32 index)
        {
            SharpDX.Direct3D11.EffectVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, index, (*(void ***)this._nativePointer)[11]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a constant buffer.</p>
        /// </summary>
        /// <returns><p>A reference to a <strong><see cref = "SharpDX.Direct3D11.EffectConstantBuffer"/></strong>.</p></returns>
        /// <remarks>
        /// <p>Effect variables are read-from or written-to a constant buffer.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476812</doc-id>
        /// <unmanaged>ID3DX11EffectConstantBuffer* ID3DX11EffectVariable::GetParentConstantBuffer()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::GetParentConstantBuffer</unmanaged-short>
        internal unsafe SharpDX.Direct3D11.EffectConstantBuffer GetParentConstantBuffer()
        {
            SharpDX.Direct3D11.EffectConstantBuffer __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[12]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectConstantBuffer(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a scalar variable.</p>
        /// </summary>
        /// <returns><p>A reference to a scalar variable. See <strong><see cref = "SharpDX.Direct3D11.EffectScalarVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <p>AsScalar returns a version of the effect variable that has been specialized to a scalar variable. Similar to a cast,  this specialization will return an invalid object if the effect variable does not contain scalar data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476799</doc-id>
        /// <unmanaged>ID3DX11EffectScalarVariable* ID3DX11EffectVariable::AsScalar()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::AsScalar</unmanaged-short>
        internal unsafe SharpDX.Direct3D11.EffectScalarVariable AsScalar_()
        {
            SharpDX.Direct3D11.EffectScalarVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[13]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectScalarVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a vector variable.</p>
        /// </summary>
        /// <returns><p>A reference to a vector variable. See <strong><see cref = "SharpDX.Direct3D11.EffectVectorVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <p>AsVector returns a version of the effect variable that has been specialized to a vector variable. Similar to a cast,  this specialization will return an invalid object if the effect variable does not contain vector data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476804</doc-id>
        /// <unmanaged>ID3DX11EffectVectorVariable* ID3DX11EffectVariable::AsVector()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::AsVector</unmanaged-short>
        internal unsafe SharpDX.Direct3D11.EffectVectorVariable AsVector_()
        {
            SharpDX.Direct3D11.EffectVectorVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[14]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectVectorVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a matrix variable.</p>
        /// </summary>
        /// <returns><p>A reference to a matrix variable. See <strong><see cref = "SharpDX.Direct3D11.EffectMatrixVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <p>AsMatrix returns a version of the effect variable that has been specialized to a matrix variable. Similar to a cast, this specialization will  return an invalid object if the effect variable does not contain matrix data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476795</doc-id>
        /// <unmanaged>ID3DX11EffectMatrixVariable* ID3DX11EffectVariable::AsMatrix()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::AsMatrix</unmanaged-short>
        internal unsafe SharpDX.Direct3D11.EffectMatrixVariable AsMatrix_()
        {
            SharpDX.Direct3D11.EffectMatrixVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[15]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectMatrixVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a string variable.</p>
        /// </summary>
        /// <returns><p>A reference to a string variable. See <strong><see cref = "SharpDX.Direct3D11.EffectStringVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <p>AsString returns a version of the effect variable that has been specialized to a string variable. Similar to a cast,  this specialization will return an invalid object if the effect variable does not contain string data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476802</doc-id>
        /// <unmanaged>ID3DX11EffectStringVariable* ID3DX11EffectVariable::AsString()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::AsString</unmanaged-short>
        internal unsafe SharpDX.Direct3D11.EffectStringVariable AsString_()
        {
            SharpDX.Direct3D11.EffectStringVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[16]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectStringVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a class-instance variable.</p>
        /// </summary>
        /// <returns><p>A reference to class-instance variable. See <strong><see cref = "SharpDX.Direct3D11.EffectClassInstanceVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476790</doc-id>
        /// <unmanaged>ID3DX11EffectClassInstanceVariable* ID3DX11EffectVariable::AsClassInstance()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::AsClassInstance</unmanaged-short>
        internal unsafe SharpDX.Direct3D11.EffectClassInstanceVariable AsClassInstance_()
        {
            SharpDX.Direct3D11.EffectClassInstanceVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[17]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectClassInstanceVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get an interface variable.</p>
        /// </summary>
        /// <returns><p>A reference to an interface variable.  See <strong><see cref = "SharpDX.Direct3D11.EffectInterfaceVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476794</doc-id>
        /// <unmanaged>ID3DX11EffectInterfaceVariable* ID3DX11EffectVariable::AsInterface()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::AsInterface</unmanaged-short>
        internal unsafe SharpDX.Direct3D11.EffectInterfaceVariable AsInterface_()
        {
            SharpDX.Direct3D11.EffectInterfaceVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[18]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectInterfaceVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a shader-resource variable.</p>
        /// </summary>
        /// <returns><p>A reference to a shader-resource variable. See <strong><see cref = "SharpDX.Direct3D11.EffectShaderResourceVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <p>AsShaderResource returns a version of the effect variable that has been specialized to a shader-resource variable.  Similar to a cast, this specialization will return an invalid object if the effect variable does not contain shader-resource data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476801</doc-id>
        /// <unmanaged>ID3DX11EffectShaderResourceVariable* ID3DX11EffectVariable::AsShaderResource()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::AsShaderResource</unmanaged-short>
        internal unsafe SharpDX.Direct3D11.EffectShaderResourceVariable AsShaderResource_()
        {
            SharpDX.Direct3D11.EffectShaderResourceVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[19]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectShaderResourceVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get an unordered-access-view variable.</p>
        /// </summary>
        /// <returns><p>A reference to an unordered-access-view variable.  See <strong><see cref = "SharpDX.Direct3D11.EffectUnorderedAccessViewVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476803</doc-id>
        /// <unmanaged>ID3DX11EffectUnorderedAccessViewVariable* ID3DX11EffectVariable::AsUnorderedAccessView()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::AsUnorderedAccessView</unmanaged-short>
        internal unsafe SharpDX.Direct3D11.EffectUnorderedAccessViewVariable AsUnorderedAccessView_()
        {
            SharpDX.Direct3D11.EffectUnorderedAccessViewVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[20]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectUnorderedAccessViewVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a render-target-view variable.</p>
        /// </summary>
        /// <returns><p>A reference to a render-target-view variable. See <strong><see cref = "SharpDX.Direct3D11.EffectRenderTargetViewVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <p>This method returns a version of the effect variable that has been specialized to a render-target-view variable.  Similar to a cast, this specialization will return an invalid object if the effect variable does not contain render-target-view data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476797</doc-id>
        /// <unmanaged>ID3DX11EffectRenderTargetViewVariable* ID3DX11EffectVariable::AsRenderTargetView()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::AsRenderTargetView</unmanaged-short>
        internal unsafe SharpDX.Direct3D11.EffectRenderTargetViewVariable AsRenderTargetView_()
        {
            SharpDX.Direct3D11.EffectRenderTargetViewVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[21]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectRenderTargetViewVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a depth-stencil-view variable.</p>
        /// </summary>
        /// <returns><p>A reference to a depth-stencil-view variable. See <strong><see cref = "SharpDX.Direct3D11.EffectDepthStencilViewVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <p>This method returns a version of the effect variable that has been specialized to a depth-stencil-view variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain depth-stencil-view data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476793</doc-id>
        /// <unmanaged>ID3DX11EffectDepthStencilViewVariable* ID3DX11EffectVariable::AsDepthStencilView()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::AsDepthStencilView</unmanaged-short>
        internal unsafe SharpDX.Direct3D11.EffectDepthStencilViewVariable AsDepthStencilView_()
        {
            SharpDX.Direct3D11.EffectDepthStencilViewVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[22]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectDepthStencilViewVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a constant buffer.</p>
        /// </summary>
        /// <returns><p>A reference to a constant buffer. See <strong><see cref = "SharpDX.Direct3D11.EffectConstantBuffer"/></strong>.</p></returns>
        /// <remarks>
        /// <p>AsConstantBuffer returns a version of the effect variable that has been specialized to a constant buffer.  Similar to a cast, this specialization will return an invalid object if the effect variable does not contain constant buffer data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476791</doc-id>
        /// <unmanaged>ID3DX11EffectConstantBuffer* ID3DX11EffectVariable::AsConstantBuffer()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::AsConstantBuffer</unmanaged-short>
        internal unsafe SharpDX.Direct3D11.EffectConstantBuffer AsConstantBuffer_()
        {
            SharpDX.Direct3D11.EffectConstantBuffer __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[23]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectConstantBuffer(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a shader variable.</p>
        /// </summary>
        /// <returns><p>A reference to a shader variable. See <strong><see cref = "SharpDX.Direct3D11.EffectShaderVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <p>AsShader returns a version of the effect variable that has been specialized to a shader variable. Similar to a cast,  this specialization will return an invalid object if the effect variable does not contain shader data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476800</doc-id>
        /// <unmanaged>ID3DX11EffectShaderVariable* ID3DX11EffectVariable::AsShader()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::AsShader</unmanaged-short>
        internal unsafe SharpDX.Direct3D11.EffectShaderVariable AsShader_()
        {
            SharpDX.Direct3D11.EffectShaderVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[24]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectShaderVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a effect-blend variable.</p>
        /// </summary>
        /// <returns><p>A reference to an effect blend variable. See <strong><see cref = "SharpDX.Direct3D11.EffectBlendVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <p>AsBlend returns a version of the effect variable that has been specialized to an effect-blend variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain effect-blend data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476789</doc-id>
        /// <unmanaged>ID3DX11EffectBlendVariable* ID3DX11EffectVariable::AsBlend()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::AsBlend</unmanaged-short>
        internal unsafe SharpDX.Direct3D11.EffectBlendVariable AsBlend_()
        {
            SharpDX.Direct3D11.EffectBlendVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[25]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectBlendVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a depth-stencil variable.</p>
        /// </summary>
        /// <returns><p>A reference to a depth-stencil variable. See <strong><see cref = "SharpDX.Direct3D11.EffectDepthStencilVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <p>AsDepthStencil returns a version of the effect variable that has been specialized to a depth-stencil variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain depth-stencil data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476792</doc-id>
        /// <unmanaged>ID3DX11EffectDepthStencilVariable* ID3DX11EffectVariable::AsDepthStencil()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::AsDepthStencil</unmanaged-short>
        internal unsafe SharpDX.Direct3D11.EffectDepthStencilVariable AsDepthStencil_()
        {
            SharpDX.Direct3D11.EffectDepthStencilVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[26]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectDepthStencilVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a rasterizer variable.</p>
        /// </summary>
        /// <returns><p>A reference to a rasterizer variable. See <strong><see cref = "SharpDX.Direct3D11.EffectRasterizerVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <p>AsRasterizer returns a version of the effect variable that has been specialized to a rasterizer variable. Similar to a cast, this specialization  will return an invalid object if the effect variable does not contain rasterizer data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476796</doc-id>
        /// <unmanaged>ID3DX11EffectRasterizerVariable* ID3DX11EffectVariable::AsRasterizer()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::AsRasterizer</unmanaged-short>
        internal unsafe SharpDX.Direct3D11.EffectRasterizerVariable AsRasterizer_()
        {
            SharpDX.Direct3D11.EffectRasterizerVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[27]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectRasterizerVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a sampler variable.</p>
        /// </summary>
        /// <returns><p>A reference to a sampler variable. See <strong><see cref = "SharpDX.Direct3D11.EffectSamplerVariable"/></strong>.</p></returns>
        /// <remarks>
        /// <p>AsSampler returns a version of the effect variable that has been specialized to a sampler variable. Similar to a cast, this specialization will  return an invalid object if the effect variable does not contain sampler data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476798</doc-id>
        /// <unmanaged>ID3DX11EffectSamplerVariable* ID3DX11EffectVariable::AsSampler()</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::AsSampler</unmanaged-short>
        internal unsafe SharpDX.Direct3D11.EffectSamplerVariable AsSampler_()
        {
            SharpDX.Direct3D11.EffectSamplerVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[28]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.Direct3D11.EffectSamplerVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Set data.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the variable.</p> </dd></param>
        /// <param name = "byteOffset"><dd>  <p>The offset (in bytes) from the beginning of the reference to the data.</p> </dd></param>
        /// <param name = "byteCount"><dd>  <p>The number of bytes to set.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>This method does no conversion or type checking; it is therefore a very quick way to access array items.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476816</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectVariable::SetRawValue([In, Buffer] const void* pData,[In] unsigned int ByteOffset,[In] unsigned int ByteCount)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::SetRawValue</unmanaged-short>
        public unsafe void SetRawValue(System.IntPtr dataRef, System.Int32 byteOffset, System.Int32 byteCount)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)dataRef, byteOffset, byteCount, (*(void ***)this._nativePointer)[29]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get data.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the variable.</p> </dd></param>
        /// <param name = "byteOffset"><dd>  <p>The offset (in bytes) from the beginning of the reference to the data.</p> </dd></param>
        /// <param name = "byteCount"><dd>  <p>The number of bytes to get.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>This method does no conversion or type checking; it is therefore a very quick way to access array items.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476813</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectVariable::GetRawValue([Out, Buffer] void* pData,[In] unsigned int ByteOffset,[In] unsigned int ByteCount)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVariable::GetRawValue</unmanaged-short>
        public unsafe void GetRawValue(System.IntPtr dataRef, System.Int32 byteOffset, System.Int32 byteCount)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, (void *)dataRef, byteOffset, byteCount, (*(void ***)this._nativePointer)[30]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("5e785d4a-d87b-48d8-b6e6-0f8ca7e7467a")]
    public partial class EffectVectorVariable : SharpDX.Direct3D11.EffectVariable
    {
        public EffectVectorVariable(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator EffectVectorVariable(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new EffectVectorVariable(nativePtr);
        /// <summary>
        /// <p>Set a four-component vector that contains boolean data.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the first component.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476824</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectVectorVariable::SetBoolVector([In] const SHARPDX_BOOL4* pData)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVectorVariable::SetBoolVector</unmanaged-short>
        public unsafe void Set(SharpDX.Mathematics.Interop.RawBool4 dataRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, &dataRef, (*(void ***)this._nativePointer)[31]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Set a four-component vector that contains integer data.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the first component.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476828</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectVectorVariable::SetIntVector([In] const SHARPDX_INT4* pData)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVectorVariable::SetIntVector</unmanaged-short>
        public unsafe void Set(SharpDX.Mathematics.Interop.RawInt4 dataRef)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, &dataRef, (*(void ***)this._nativePointer)[32]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Set a four-component vector that contains floating-point data.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the first component.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476826</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectVectorVariable::SetFloatVector([In, Buffer] const float* pData)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVectorVariable::SetFloatVector</unmanaged-short>
        public unsafe void Set(System.Single[] dataRef)
        {
            SharpDX.Result __result__;
            fixed (void *dataRef_ = dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, (*(void ***)this._nativePointer)[33]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a four-component vector that contains boolean data.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the first component.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476818</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectVectorVariable::GetBoolVector([Out] SHARPDX_BOOL4* pData)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVectorVariable::GetBoolVector</unmanaged-short>
        internal unsafe void GetBoolVector(out SharpDX.Mathematics.Interop.RawBool4 dataRef)
        {
            dataRef = default (SharpDX.Mathematics.Interop.RawBool4);
            SharpDX.Result __result__;
            fixed (void *dataRef_ = &dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, (*(void ***)this._nativePointer)[34]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a four-component vector that contains integer data.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the first component.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476822</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectVectorVariable::GetIntVector([Out] SHARPDX_INT4* pData)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVectorVariable::GetIntVector</unmanaged-short>
        internal unsafe void GetIntVector(out SharpDX.Mathematics.Interop.RawInt4 dataRef)
        {
            dataRef = default (SharpDX.Mathematics.Interop.RawInt4);
            SharpDX.Result __result__;
            fixed (void *dataRef_ = &dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, (*(void ***)this._nativePointer)[35]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a four-component vector that contains floating-point data.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the first component.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476820</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectVectorVariable::GetFloatVector([Out] SHARPDX_VECTOR4* pData)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVectorVariable::GetFloatVector</unmanaged-short>
        internal unsafe void GetFloatVector(out SharpDX.Mathematics.Interop.RawVector4 dataRef)
        {
            dataRef = default (SharpDX.Mathematics.Interop.RawVector4);
            SharpDX.Result __result__;
            fixed (void *dataRef_ = &dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, (*(void ***)this._nativePointer)[36]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Set an array of four-component vectors that contain boolean data.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476825</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectVectorVariable::SetBoolVectorArray([In, Buffer] const SHARPDX_BOOL4* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVectorVariable::SetBoolVectorArray</unmanaged-short>
        internal unsafe void Set(SharpDX.Mathematics.Interop.RawBool4[] dataRef, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            fixed (void *dataRef_ = dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, offset, count, (*(void ***)this._nativePointer)[37]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Set an array of four-component vectors that contain integer data.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476829</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectVectorVariable::SetIntVectorArray([In, Buffer] const SHARPDX_INT4* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVectorVariable::SetIntVectorArray</unmanaged-short>
        internal unsafe void Set(SharpDX.Mathematics.Interop.RawInt4[] dataRef, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            fixed (void *dataRef_ = dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, offset, count, (*(void ***)this._nativePointer)[38]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Set an array of four-component vectors that contain floating-point data.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476827</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectVectorVariable::SetFloatVectorArray([In, Buffer] const SHARPDX_VECTOR4* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVectorVariable::SetFloatVectorArray</unmanaged-short>
        internal unsafe void Set(SharpDX.Mathematics.Interop.RawVector4[] dataRef, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            fixed (void *dataRef_ = dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, offset, count, (*(void ***)this._nativePointer)[39]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get an array of four-component vectors that contain boolean data.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476819</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectVectorVariable::GetBoolVectorArray([Out, Buffer] SHARPDX_BOOL4* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVectorVariable::GetBoolVectorArray</unmanaged-short>
        internal unsafe void GetBoolVectorArray(SharpDX.Mathematics.Interop.RawBool4[] dataRef, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            fixed (void *dataRef_ = dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, offset, count, (*(void ***)this._nativePointer)[40]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get an array of four-component vectors that contain integer data.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476823</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectVectorVariable::GetIntVectorArray([Out, Buffer] SHARPDX_INT4* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVectorVariable::GetIntVectorArray</unmanaged-short>
        internal unsafe void GetIntVectorArray(SharpDX.Mathematics.Interop.RawInt4[] dataRef, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            fixed (void *dataRef_ = dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, offset, count, (*(void ***)this._nativePointer)[41]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get an array of four-component vectors that contain floating-point data.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
        /// <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
        /// <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
        /// </remarks>
        /// <doc-id>ff476821</doc-id>
        /// <unmanaged>HRESULT ID3DX11EffectVectorVariable::GetFloatVectorArray([Out, Buffer] SHARPDX_VECTOR4* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        /// <unmanaged-short>ID3DX11EffectVectorVariable::GetFloatVectorArray</unmanaged-short>
        internal unsafe void GetFloatVectorArray(SharpDX.Mathematics.Interop.RawVector4[] dataRef, System.Int32 offset, System.Int32 count)
        {
            SharpDX.Result __result__;
            fixed (void *dataRef_ = dataRef)
                __result__ = SharpDX.Direct3D11.Effects.LocalInterop.CalliStdCallint(this._nativePointer, dataRef_, offset, count, (*(void ***)this._nativePointer)[42]);
            __result__.CheckError();
        }
    }
}